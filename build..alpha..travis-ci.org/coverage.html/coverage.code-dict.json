{"/home/travis/build/npmtest/node-npmtest-generator-angular-fullstack/test.js":"/* istanbul instrument in package npmtest_generator_angular_fullstack */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-angular-fullstack/lib.npmtest_generator_angular_fullstack.js":"/* istanbul instrument in package npmtest_generator_angular_fullstack */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_generator_angular_fullstack = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_generator_angular_fullstack = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-angular-fullstack/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-generator-angular-fullstack && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_generator_angular_fullstack */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_generator_angular_fullstack\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_generator_angular_fullstack.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_generator_angular_fullstack.rollup.js'] =\n            local.assetsDict['/assets.npmtest_generator_angular_fullstack.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_generator_angular_fullstack.__dirname + '/lib.npmtest_generator_angular_fullstack.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-angular-fullstack/node_modules/generator-angular-fullstack/Gruntfile.js":"'use strict';\n\nvar shell = require('shelljs');\nvar child_process = require('child_process');\nvar Q = require('q');\nvar helpers = require('yeoman-test');\nvar fs = require('fs');\nvar path = require('path');\n\nmodule.exports = function (grunt) {\n  var gruntUtils = require('./task-utils/grunt')(grunt);\n  var gitCmd = gruntUtils.gitCmd;\n  var gitCmdAsync = gruntUtils.gitCmdAsync;\n\n  grunt.initConfig({\n    config: {\n      demo: 'demo'\n    },\n    pkg: grunt.file.readJSON('package.json'),\n    release: {\n      options: {\n        commitMessage: '<%= version %>',\n        tagName: '<%= version %>',\n        file: 'package.json',\n        beforeBump: ['updateSubmodules'],\n        afterBump: ['updateFixtures:deps', 'commitNgFullstackDeps'],\n        beforeRelease: ['stage'],\n        push: false,\n        pushTags: false,\n        npm: false\n      }\n    },\n    stage: {\n      options: {\n        files: ['CHANGELOG.md', 'angular-fullstack-deps']\n      }\n    },\n    buildcontrol: {\n      options: {\n        dir: 'demo',\n        commit: true,\n        push: true,\n        connectCommits: false,\n        message: 'Built using Angular Fullstack v<%= pkg.version %> from commit %sourceCommit%'\n      },\n      release: {\n        options: {\n          remote: 'origin',\n          branch: 'master'\n        }\n      }\n    },\n    david: {\n      gen: {\n        options: {}\n      },\n      app: {\n        options: {\n          package: 'test/fixtures/package.json'\n        }\n      }\n    }\n  });\n\n  grunt.registerTask('stage', 'git add files before running the release task', function () {\n    var files = grunt.config('stage.options').files;\n    gitCmd(['add'].concat(files), {}, this.async());\n  });\n\n  grunt.registerTask('commitNgFullstackDeps', function() {\n    grunt.config.requires(\n      'commitNgFullstackDeps.options.files',\n      'commitNgFullstackDeps.options.cwd'\n    );\n    var ops = grunt.config.get('commitNgFullstackDeps').options;\n    var version = require('./package.json').version || 'NO VERSION SET';\n    if (Array.isArray(ops.files) && ops.files.length > 0) {\n      gitCmd(['commit', '-m', version].concat(ops.files), {\n        cwd: path.resolve(__dirname, ops.cwd)\n      }, this.async());\n    } else {\n      grunt.log.writeln('No files were commited');\n    }\n  });\n\n  grunt.registerTask('generateDemo', 'generate demo', function () {\n    var done = this.async();\n\n    shell.mkdir(grunt.config('config').demo);\n    shell.cd(grunt.config('config').demo);\n\n    Q()\n      .then(generateDemo)\n      .then(function() {\n        shell.cd('../');\n      })\n      .catch(function(msg){\n        grunt.fail.warn(msg || 'failed to generate demo')\n      })\n      .finally(done);\n\n    function generateDemo() {\n      var deferred = Q.defer();\n      var options = {\n        script: 'js',\n        markup: 'html',\n        stylesheet: 'sass',\n        router: 'uirouter',\n        bootstrap: true,\n        uibootstrap: true,\n        mongoose: true,\n        testing: 'jasmine',\n        auth: true,\n        oauth: ['googleAuth', 'twitterAuth'],\n        socketio: true\n      };\n\n      var deps = [\n        '../app',\n        [\n          helpers.createDummyGenerator(),\n          'ng-component:app'\n        ]\n      ];\n\n      var gen = helpers.createGenerator('angular-fullstack:app', deps);\n\n      helpers.mockPrompt(gen, options);\n      gen.run({}, function () {\n        deferred.resolve();\n      });\n\n      return deferred.promise;\n    }\n  });\n\n  grunt.registerTask('releaseDemoBuild', 'builds and releases demo', function () {\n    var done = this.async();\n\n    shell.cd(grunt.config('config').demo);\n\n    Q()\n      .then(gruntBuild)\n      .then(gruntRelease)\n      .then(function() {\n        shell.cd('../');\n      })\n      .catch(function(msg){\n        grunt.fail.warn(msg || 'failed to release demo')\n      })\n      .finally(done);\n\n    function run(cmd) {\n      var deferred = Q.defer();\n      var generator = shell.exec(cmd, {async:true});\n      generator.stdout.on('data', function (data) {\n        grunt.verbose.writeln(data);\n      });\n      generator.on('exit', function (code) {\n        deferred.resolve();\n      });\n\n      return deferred.promise;\n    }\n\n    function gruntBuild() {\n      return run('grunt');\n    }\n\n    function gruntRelease() {\n      return run('grunt buildcontrol:heroku');\n    }\n  });\n\n  grunt.registerTask('deps', function(target) {\n    if (!target || target === 'app') grunt.task.run(['updateFixtures']);\n    grunt.task.run(['david:' + (target || '')]);\n  });\n\n  grunt.registerTask('demo', [\n    'clean:demo',\n    'generateDemo'\n  ]);\n\n  grunt.registerTask('releaseDemo', [\n    'demo',\n    'releaseDemoBuild',\n    'buildcontrol:release'\n  ]);\n\n  //grunt.registerTask('default', ['bump', 'changelog', 'stage', 'release']);\n};\n","/home/travis/build/npmtest/node-npmtest-generator-angular-fullstack/node_modules/generator-angular-fullstack/generators/generator-base.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.genBase = genBase;\nexports.genNamedBase = genNamedBase;\n\nvar _util = require('util');\n\nvar _util2 = _interopRequireDefault(_util);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _underscore = require('underscore.string');\n\nvar _underscore2 = _interopRequireDefault(_underscore);\n\nvar _semver = require('semver');\n\nvar _semver2 = _interopRequireDefault(_semver);\n\nvar _yeomanWelcome = require('yeoman-welcome');\n\nvar _yeomanWelcome2 = _interopRequireDefault(_yeomanWelcome);\n\nvar _util3 = require('./util');\n\nvar genUtils = _interopRequireWildcard(_util3);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// extend lodash with underscore.string\n_lodash2.default.mixin(_underscore2.default.exports());\n\nfunction genBase(self) {\n  self = self || this;\n\n  var yoCheckPromise = void 0;\n  if (!process.env.CI) {\n    yoCheckPromise = genUtils.runCmd('yo --version').then(function (stdout) {\n      if (!_semver2.default.satisfies(_semver2.default.clean(stdout), '>= 1.7.1')) {\n        throw new Error('ERROR: You need to update yo to at least 1.7.1 (npm i -g yo)\\n\\'yo --version\\' output: ' + stdout);\n      }\n    });\n  } else {\n    // CI won't have yo installed\n    yoCheckPromise = Promise.resolve();\n  }\n\n  self.lodash = _lodash2.default;\n  self.yoWelcome = _yeomanWelcome2.default;\n\n  var baseDetermineAppname = self.determineAppname.bind(self);\n  self.determineAppname = function () {\n    if (self['name']) {\n      return self['name'];\n    } else {\n      return baseDetermineAppname();\n    }\n  };\n\n  self.appname = _lodash2.default.camelize(_lodash2.default.slugify(_lodash2.default.humanize(self.determineAppname())));\n  self.scriptAppName = self.appname + genUtils.appSuffix(self);\n\n  self.filters = self.filters || self.config.get('filters');\n\n  // dynamic assertion statements\n  self.expect = function () {\n    return self.filters.expect ? 'expect(' : '';\n  };\n  self.to = function () {\n    return self.filters.expect ? ').to' : '.should';\n  };\n\n  // dynamic relative require path\n  self.relativeRequire = genUtils.relativeRequire.bind(self);\n  // process template directory\n  self.processDirectory = genUtils.processDirectory.bind(self);\n  // rewrite a file in place\n  self.rewriteFile = genUtils.rewriteFile;\n\n  return yoCheckPromise;\n}\n\nfunction genNamedBase(self) {\n  self = self || this;\n\n  // extend genBase\n  return genBase(self).then(function () {\n    var name = self.name.replace(/\\//g, '-');\n\n    self.cameledName = _lodash2.default.camelize(name);\n    self.classedName = _lodash2.default.classify(name);\n\n    self.basename = _path2.default.basename(self.name);\n    self.dirname = self.name.indexOf('/') >= 0 ? _path2.default.dirname(self.name) : self.name;\n  });\n}","/home/travis/build/npmtest/node-npmtest-generator-angular-fullstack/node_modules/generator-angular-fullstack/generators/util.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.runCmd = runCmd;\nexports.rewriteFile = rewriteFile;\nexports.rewrite = rewrite;\nexports.appSuffix = appSuffix;\nexports.relativeRequire = relativeRequire;\nexports.processDirectory = processDirectory;\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _glob = require('glob');\n\nvar _glob2 = _interopRequireDefault(_glob);\n\nvar _bluebird = require('bluebird');\n\nvar _bluebird2 = _interopRequireDefault(_bluebird);\n\nvar _child_process = require('child_process');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar DEBUG = !!process.env.DEBUG;\n\n/**\n * @callback doneCallback\n * @param {null|Error} err\n */\n\n/**\n * Run the given command in a child process\n * @param {string} cmd - command to run\n * @returns {Promise}\n */\nfunction runCmd(cmd) {\n  return new _bluebird2.default(function (resolve, reject) {\n    (0, _child_process.exec)(cmd, {}, function (err, stdout, stderr) {\n      if (err) {\n        console.error(stdout);\n        return reject(err);\n      } else {\n        if (DEBUG) console.log(cmd + ' stdout: ' + stdout);\n        return resolve(stdout);\n      }\n    });\n  });\n}\n\nfunction expandFiles(pattern, options) {\n  options = options || {};\n  var cwd = options.cwd || process.cwd();\n  return _glob2.default.sync(pattern, options).filter(function (filepath) {\n    return _fs2.default.statSync(_path2.default.join(cwd, filepath)).isFile();\n  });\n}\n\nfunction rewriteFile(args) {\n  args.path = args.path || process.cwd();\n  var fullPath = _path2.default.join(args.path, args.file);\n\n  args.haystack = _fs2.default.readFileSync(fullPath, 'utf8');\n  var body = rewrite(args);\n\n  _fs2.default.writeFileSync(fullPath, body);\n}\n\nfunction escapeRegExp(str) {\n  return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');\n}\n\nfunction rewrite(args) {\n  // check if splicable is already in the body text\n  var re = new RegExp(args.splicable.map(function (line) {\n    return '\\s*' + escapeRegExp(line);\n  }).join('\\n'));\n\n  if (re.test(args.haystack)) {\n    return args.haystack;\n  }\n\n  var lines = args.haystack.split('\\n');\n\n  var otherwiseLineIndex = -1;\n  lines.forEach(function (line, i) {\n    if (line.indexOf(args.needle) !== -1) {\n      otherwiseLineIndex = i;\n    }\n  });\n  if (otherwiseLineIndex === -1) return lines.join('\\n');\n\n  var spaces = 0;\n  while (lines[otherwiseLineIndex].charAt(spaces) === ' ') {\n    spaces += 1;\n  }\n\n  var spaceStr = '';\n  while ((spaces -= 1) >= 0) {\n    spaceStr += ' ';\n  }\n\n  lines.splice(otherwiseLineIndex + 1, 0, args.splicable.map(function (line) {\n    return spaceStr + line;\n  }).join('\\n'));\n\n  return lines.join('\\n');\n}\n\nfunction appSuffix(self) {\n  var suffix = self.options['app-suffix'];\n  return typeof suffix === 'string' ? self.lodash.classify(suffix) : '';\n}\n\nfunction relativeRequire(to, fr) {\n  fr = this.destinationPath(fr || this.filePath);\n  to = this.destinationPath(to);\n  return _path2.default.relative(_path2.default.dirname(fr), to).replace(/\\\\/g, '/') // convert win32 separator to posix\n  .replace(/^(?!\\.\\.)(.*)/, './$1') // prefix non parent path with ./\n  .replace(/[\\/\\\\]index\\.js$/, ''); // strip index.js suffix from path\n}\n\nfunction filterFile(template) {\n  // Find matches for parans\n  var filterMatches = template.match(/\\(([^)]+)\\)/g);\n  var filters = [];\n  if (filterMatches) {\n    filterMatches.forEach(function (filter) {\n      filters.push(filter.replace('(', '').replace(')', ''));\n      template = template.replace(filter, '');\n    });\n  }\n\n  return { name: template, filters: filters };\n}\n\nfunction templateIsUsable(self, filteredFile) {\n  var filters = self.filters || self.config.get('filters');\n  var enabledFilters = [];\n  for (var key in filters) {\n    if (filters[key]) enabledFilters.push(key);\n  }\n  var matchedFilters = self.lodash.intersection(filteredFile.filters, enabledFilters);\n  // check that all filters on file are matched\n  if (filteredFile.filters.length && matchedFilters.length !== filteredFile.filters.length) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * \n */\nfunction processDirectory(source, destination) {\n  var self = this;\n  var root = _path2.default.isAbsolute(source) ? source : _path2.default.join(self.sourceRoot(), source);\n  var files = expandFiles('**', { dot: true, cwd: root });\n  var dest, src;\n\n  files.forEach(function (f) {\n    var filteredFile = filterFile(f);\n    if (self.basename) {\n      filteredFile.name = filteredFile.name.replace('basename', self.basename);\n    }\n    if (self.name) {\n      filteredFile.name = filteredFile.name.replace('name', self.name);\n    }\n    var name = filteredFile.name;\n    var copy = false,\n        stripped;\n\n    src = _path2.default.join(root, f);\n    dest = _path2.default.join(destination, name);\n\n    if (self.filters.ts && dest.indexOf('client') > -1 && dest.indexOf('.json') === -1) {\n      dest = dest.replace('.js', '.ts');\n    }\n\n    if (_path2.default.basename(dest).indexOf('_') === 0) {\n      stripped = _path2.default.basename(dest).replace(/^_/, '');\n      dest = _path2.default.join(_path2.default.dirname(dest), stripped);\n    }\n\n    if (_path2.default.basename(dest).indexOf('!') === 0) {\n      stripped = _path2.default.basename(dest).replace(/^!/, '');\n      dest = _path2.default.join(_path2.default.dirname(dest), stripped);\n      copy = true;\n    }\n\n    if (templateIsUsable(self, filteredFile)) {\n      if (copy) {\n        self.fs.copy(src, dest);\n      } else {\n        self.filePath = dest;\n        self.fs.copyTpl(src, dest, self);\n        delete self.filePath;\n      }\n    }\n  });\n}","/home/travis/build/npmtest/node-npmtest-generator-angular-fullstack/node_modules/generator-angular-fullstack/generators/insight-init.js":"'use strict';\n\nvar Insight = require('insight');\nvar pkg = require('../package.json');\n\nvar insight = new Insight({\n    // Google Analytics tracking code\n    trackingCode: 'UA-48443700-4',\n    pkg: pkg\n});\n\nif (process.stdout.isTTY === undefined) insight.optOut = false;\n\n// ask for permission the first time\n// if(insight.optOut === undefined) {\n//     insight.askPermission();\n// }\n\n// insight.track('foo', 'bar');\n// recorded in Analytics as `/foo/bar`\n\nmodule.exports = insight;","/home/travis/build/npmtest/node-npmtest-generator-angular-fullstack/node_modules/generator-angular-fullstack/gulpfile.js":"'use strict';\nconst fs = require('fs');\nconst path = require('path');\nconst exec = require('child_process').exec;\nconst _ = require('lodash');\nconst Promise = require('bluebird');\nconst gulp = require('gulp');\nconst gutil = require('gulp-util');\nconst babel = require('gulp-babel');\nconst gulpMocha = require('gulp-mocha');\nconst plumber = require('gulp-plumber');\nconst gulpIf = require('gulp-if');\nconst del = require('del');\nconst lazypipe = require('lazypipe');\nconst runSequence = require('run-sequence');\nconst merge = require('merge-stream');\nconst shell = require('shelljs');\nconst ghPages = require('gulp-gh-pages');\nconst conventionalChangelog = require('gulp-conventional-changelog');\n\nvar watching = false;\n\nconst mocha = lazypipe()\n    .pipe(gulpMocha, {\n        reporter: 'spec',\n        timeout: 120000,\n        slow: 500,\n        globals: {\n            should: require('should')\n        },\n        require: [\n            './mocha.conf'\n        ]\n    });\n\nconst transpile = lazypipe()\n    .pipe(babel);\n\ngulp.task('clean', () => {\n    return del(['generators/**/*', './test/(**|!fixtures/node_modules)/*']);\n});\n\ngulp.task('babel', () => {\n    let generators = gulp.src(['src/generators/**/*.js'])\n    .pipe(gulpIf(watching, plumber()))\n        .pipe(transpile())\n        .pipe(gulp.dest('generators'));\n\n    let test = gulp.src(['src/test/**/*.js'])\n    .pipe(gulpIf(watching, plumber()))\n        .pipe(transpile())\n        .pipe(gulp.dest('test'));\n\n    return merge(generators, test);\n});\n\ngulp.task('watch', () => {\n    watching = true;\n    return gulp.watch('src/**/*.js', ['babel']);\n});\n\ngulp.task('copy', () => {\n    let nonJsGen = gulp.src(['src/generators/**/*', '!src/generators/**/*.js'], {dot: true})\n        .pipe(gulp.dest('generators'));\n\n    let nonJsTest = gulp.src(['src/test/**/*', '!src/test/**/*.js'], {dot: true})\n        .pipe(gulp.dest('test'));\n\n    return merge(nonJsGen, nonJsTest);\n});\n\ngulp.task('build', cb => {\n    return runSequence(\n        'clean',\n        'babel',\n        'copy',\n        cb\n    );\n});\n\nvar processJson = function(src, dest, opt) {\n    return new Promise((resolve, reject) => {\n        // read file, strip all ejs conditionals, and parse as json\n        fs.readFile(path.resolve(src), 'utf8', (err, data) => {\n            if(err) return reject(err);\n\n            var json = JSON.parse(data.replace(/<%(.*)%>/g, ''));\n\n            if(/package.json/g.test(src) && opt.test) {\n                delete json.scripts.postinstall;\n                json.scripts['update-webdriver'] = 'node node_modules/gulp-protractor-runner/node_modules/protractor/bin/webdriver-manager update || node node_modules/protractor/bin/webdriver-manager update';\n            }\n\n            // set properties\n            json.name = opt.appName;\n            json.description = opt.private\n                ? null\n                : 'The purpose of this repository is to track all the possible dependencies of an application created by generator-angular-fullstack.';\n            json.version = opt.genVer;\n            json.private = opt.private;\n\n            // stringify json and write it to the destination\n            fs.writeFile(path.resolve(dest), JSON.stringify(json, null, 2), err => {\n                if(err) reject(err);\n                else resolve();\n            });\n        });\n    });\n};\n\nfunction updateFixtures(target) {\n    const deps = target === 'deps';\n    const test = target === 'test';\n    const genVer = require('./package.json').version;\n    const dest = __dirname + (deps ? '/angular-fullstack-deps/' : '/test/fixtures/');\n    const appName = deps ? 'angular-fullstack-deps' : 'tempApp';\n\n    return processJson('templates/app/_package.json', dest + 'package.json', {appName, genVer, private: !deps, test: test});\n}\n\ngulp.task('updateFixtures', cb => {\n    return runSequence(['updateFixtures:test', 'updateFixtures:deps'], cb);\n});\ngulp.task('updateFixtures:test', () => {\n    return updateFixtures('test');\n});\ngulp.task('updateFixtures:deps', () => {\n    return updateFixtures('deps');\n});\n\nfunction execAsync(cmd, opt) {\n    return new Promise((resolve, reject) => {\n        exec(cmd, opt, (err, stdout, stderr) => {\n            if(err) {\n                console.log(`stderr: ${stderr}`);\n                return reject(err);\n            }\n\n            return resolve(stdout);\n        })\n    });\n}\n\ngulp.task('installFixtures', function() {\n    gutil.log('installing npm dependencies for generated app');\n    let progress = setInterval(() => {\n        process.stdout.write('.');\n    }, 1 * 1000);\n    shell.cd('test/fixtures');\n\n    execAsync('npm install --quiet', {cwd: '../fixtures'}).then(() => {\n        process.stdout.write('\\n');\n        if(!process.env.SAUCE_USERNAME) {\n            gutil.log('running npm run-script update-webdriver');\n            return execAsync('npm run-script update-webdriver').then(() => {\n                clearInterval(progress);\n                process.stdout.write('\\n');\n                shell.cd('../../');\n            });\n        } else {\n            clearInterval(progress);\n            process.stdout.write('\\n');\n            shell.cd('../../');\n            return Promise.resolve();\n        }\n    });\n});\n\ngulp.task('test', () => {\n    return gulp.src(['test/pre.test.js', 'test/*.test.js'])\n        .pipe(mocha());\n});\n\ngulp.task('updateSubmodules', () => console.log('TODO'));\ngulp.task('changelog', () => console.log('TODO'));\ngulp.task('generateDemo', () => console.log('TODO'));\ngulp.task('demo', () => console.log('TODO')); // ['clean:demo', 'generateDemo']\ngulp.task('releaseDemo', () => console.log('TODO')); //['demo', 'releaseDemoBuild', 'buildcontrol:release']\ngulp.task('releaseDemoBuild', () => console.log('TODO'));\ngulp.task('deps', () => console.log('TODO')); // updateFixtures, david\ngulp.task('release', () => console.log('TODO'));\ngulp.task('lint', () => console.log('TODO')); // ['gulpfile.js', 'src/**/*.js']\n\ngulp.task('daux', () => {\n    return execAsync('daux');\n});\ngulp.task('copy_docs_images', () => {\n  return gulp.src('./media/svg/*')\n    .pipe(gulp.dest('./static/'));\n});\ngulp.task('gh-pages', () => {\n  return gulp.src('./static/**/*')\n    .pipe(ghPages());\n});\ngulp.task('docs', cb => {\n    return runSequence('daux', 'copy_docs_images', 'gh-pages', cb);\n});\n\nlet finalizeContext = function(context, writerOpts, commits, keyCommit) {\n    var gitSemverTags = context.gitSemverTags;\n    var commitGroups = context.commitGroups;\n\n    if((!context.currentTag || !context.previousTag) && keyCommit) {\n        var match = /tag:\\s*(.+?)[,\\)]/gi.exec(keyCommit.gitTags);\n        var currentTag = context.currentTag = context.currentTag || match ? match[1] : null;\n        var index = gitSemverTags.indexOf(currentTag);\n        var previousTag = context.previousTag = gitSemverTags[index + 1];\n\n        if(!previousTag) {\n            if(options.append) {\n              context.previousTag = context.previousTag || commits[0] ? commits[0].hash : null;\n            } else {\n              context.previousTag = context.previousTag || commits[commits.length - 1] ? commits[commits.length - 1].hash : null;\n            }\n        }\n    } else {\n        context.previousTag = context.previousTag || gitSemverTags[0];\n        context.currentTag = context.currentTag || 'v' + context.version;\n    }\n\n    if(typeof context.linkCompare !== 'boolean' && context.previousTag && context.currentTag) {\n        context.linkCompare = true;\n    }\n\n    if(Array.isArray(commitGroups)) {\n        for(var i = 0, commitGroupsLength = commitGroups.length; i < commitGroupsLength; i++) {\n            var commits = commitGroups[i].commits;\n            if(Array.isArray(commits)) {\n                for(var n = 1, commitsLength = commits.length; n < commitsLength; n++) {\n                    var commit = commits[n], prevCommit = commits[n - 1];\n                    if(commit.scope && commit.scope === prevCommit.scope) {\n                        commit.subScope = true;\n                        if(prevCommit.scope && !prevCommit.subScope) {\n                            prevCommit.leadScope = true;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return context;\n};\nlet commitPartial = fs.readFileSync(path.resolve(__dirname, 'task-utils/changelog-templates/commit.hbs')).toString();\n\ngulp.task('changelog', () => {\n  return gulp.src('CHANGELOG.md', {buffer: false})\n    .pipe(conventionalChangelog({\n      preset: 'angular'\n    }, {/*context*/}, {/*git-raw-commits*/}, {/*conventional-commits-parser*/}, {/*conventional-changelog-writer*/\n        finalizeContext,\n        commitPartial\n    }))\n    .pipe(gulp.dest('./'));\n});\n","/home/travis/build/npmtest/node-npmtest-generator-angular-fullstack/node_modules/generator-angular-fullstack/mocha.conf.js":"'use strict';\n\nglobal.DEBUG = !!process.env.DEBUG;\n\nvar fs = require('fs');\nvar Promise = require('bluebird');\nPromise.promisifyAll(fs);\n","/home/travis/build/npmtest/node-npmtest-generator-angular-fullstack/node_modules/generator-angular-fullstack/task-utils/grunt.js":"'use strict';\n\nvar path = require('path');\nvar fs = require('fs');\nvar Q = require('q');\n\nexports = module.exports = function(grunt) {\n  var self;\n  return self = {\n    gitCmd: function(args, opts, done) {\n      grunt.util.spawn({\n        cmd: process.platform === 'win32' ? 'git.cmd' : 'git',\n        args: args,\n        opts: opts || {}\n      }, done);\n    },\n\n    gitCmdAsync: function(args, opts) {\n      return function() {\n        var deferred = Q.defer();\n        self.gitCmd(args, opts, function(err) {\n          if (err) { return deferred.reject(err); }\n          deferred.resolve();\n        });\n        return deferred.promise;\n      };\n    },\n\n    conventionalChangelog: {\n      finalizeContext: function(context, writerOpts, commits, keyCommit) {\n        var gitSemverTags = context.gitSemverTags;\n        var commitGroups = context.commitGroups;\n\n        if ((!context.currentTag || !context.previousTag) && keyCommit) {\n          var match = /tag:\\s*(.+?)[,\\)]/gi.exec(keyCommit.gitTags);\n          var currentTag = context.currentTag = context.currentTag || match ? match[1] : null;\n          var index = gitSemverTags.indexOf(currentTag);\n          var previousTag = context.previousTag = gitSemverTags[index + 1];\n\n          if (!previousTag) {\n            if (options.append) {\n              context.previousTag = context.previousTag || commits[0] ? commits[0].hash : null;\n            } else {\n              context.previousTag = context.previousTag || commits[commits.length - 1] ? commits[commits.length - 1].hash : null;\n            }\n          }\n        } else {\n          context.previousTag = context.previousTag || gitSemverTags[0];\n          context.currentTag = context.currentTag || 'v' + context.version;\n        }\n\n        if (typeof context.linkCompare !== 'boolean' && context.previousTag && context.currentTag) {\n          context.linkCompare = true;\n        }\n\n        if (Array.isArray(commitGroups)) {\n          for (var i = 0, commitGroupsLength = commitGroups.length; i < commitGroupsLength; i++) {\n            var commits = commitGroups[i].commits;\n            if (Array.isArray(commits)) {\n              for (var n = 1, commitsLength = commits.length; n < commitsLength; n++) {\n                var commit = commits[n], prevCommit = commits[n - 1];\n                if (commit.scope && commit.scope === prevCommit.scope) {\n                  commit.subScope = true;\n                  if (prevCommit.scope && !prevCommit.subScope) {\n                    prevCommit.leadScope = true;\n                  }\n                }\n              }\n            }\n          }\n        }\n        return context;\n      },\n      commitPartial: fs.readFileSync(path.resolve(__dirname, 'changelog-templates', 'commit.hbs')).toString()\n    }\n  };\n};\n"}