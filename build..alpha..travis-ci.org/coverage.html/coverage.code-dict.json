{"/home/travis/build/npmtest/node-npmtest-generator-angular-fullstack/test.js":"/* istanbul instrument in package npmtest_generator_angular_fullstack */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-angular-fullstack/lib.npmtest_generator_angular_fullstack.js":"/* istanbul instrument in package npmtest_generator_angular_fullstack */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_generator_angular_fullstack = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_generator_angular_fullstack = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-angular-fullstack/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-generator-angular-fullstack && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_generator_angular_fullstack */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_generator_angular_fullstack\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_generator_angular_fullstack.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_generator_angular_fullstack.rollup.js'] =\n            local.assetsDict['/assets.npmtest_generator_angular_fullstack.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_generator_angular_fullstack.__dirname + '/lib.npmtest_generator_angular_fullstack.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-angular-fullstack/node_modules/generator-angular-fullstack/Gruntfile.js":"'use strict';\n\nvar shell = require('shelljs');\nvar child_process = require('child_process');\nvar Q = require('q');\nvar helpers = require('yeoman-test');\nvar fs = require('fs');\nvar path = require('path');\n\nmodule.exports = function (grunt) {\n  var gruntUtils = require('./task-utils/grunt')(grunt);\n  var gitCmd = gruntUtils.gitCmd;\n  var gitCmdAsync = gruntUtils.gitCmdAsync;\n\n  grunt.initConfig({\n    config: {\n      demo: 'demo'\n    },\n    pkg: grunt.file.readJSON('package.json'),\n    release: {\n      options: {\n        commitMessage: '<%= version %>',\n        tagName: '<%= version %>',\n        file: 'package.json',\n        beforeBump: ['updateSubmodules'],\n        afterBump: ['updateFixtures:deps', 'commitNgFullstackDeps'],\n        beforeRelease: ['stage'],\n        push: false,\n        pushTags: false,\n        npm: false\n      }\n    },\n    stage: {\n      options: {\n        files: ['CHANGELOG.md', 'angular-fullstack-deps']\n      }\n    },\n    buildcontrol: {\n      options: {\n        dir: 'demo',\n        commit: true,\n        push: true,\n        connectCommits: false,\n        message: 'Built using Angular Fullstack v<%= pkg.version %> from commit %sourceCommit%'\n      },\n      release: {\n        options: {\n          remote: 'origin',\n          branch: 'master'\n        }\n      }\n    },\n    david: {\n      gen: {\n        options: {}\n      },\n      app: {\n        options: {\n          package: 'test/fixtures/package.json'\n        }\n      }\n    }\n  });\n\n  grunt.registerTask('stage', 'git add files before running the release task', function () {\n    var files = grunt.config('stage.options').files;\n    gitCmd(['add'].concat(files), {}, this.async());\n  });\n\n  grunt.registerTask('commitNgFullstackDeps', function() {\n    grunt.config.requires(\n      'commitNgFullstackDeps.options.files',\n      'commitNgFullstackDeps.options.cwd'\n    );\n    var ops = grunt.config.get('commitNgFullstackDeps').options;\n    var version = require('./package.json').version || 'NO VERSION SET';\n    if (Array.isArray(ops.files) && ops.files.length > 0) {\n      gitCmd(['commit', '-m', version].concat(ops.files), {\n        cwd: path.resolve(__dirname, ops.cwd)\n      }, this.async());\n    } else {\n      grunt.log.writeln('No files were commited');\n    }\n  });\n\n  grunt.registerTask('generateDemo', 'generate demo', function () {\n    var done = this.async();\n\n    shell.mkdir(grunt.config('config').demo);\n    shell.cd(grunt.config('config').demo);\n\n    Q()\n      .then(generateDemo)\n      .then(function() {\n        shell.cd('../');\n      })\n      .catch(function(msg){\n        grunt.fail.warn(msg || 'failed to generate demo')\n      })\n      .finally(done);\n\n    function generateDemo() {\n      var deferred = Q.defer();\n      var options = {\n        script: 'js',\n        markup: 'html',\n        stylesheet: 'sass',\n        router: 'uirouter',\n        bootstrap: true,\n        uibootstrap: true,\n        mongoose: true,\n        testing: 'jasmine',\n        auth: true,\n        oauth: ['googleAuth', 'twitterAuth'],\n        socketio: true\n      };\n\n      var deps = [\n        '../app',\n        [\n          helpers.createDummyGenerator(),\n          'ng-component:app'\n        ]\n      ];\n\n      var gen = helpers.createGenerator('angular-fullstack:app', deps);\n\n      helpers.mockPrompt(gen, options);\n      gen.run({}, function () {\n        deferred.resolve();\n      });\n\n      return deferred.promise;\n    }\n  });\n\n  grunt.registerTask('releaseDemoBuild', 'builds and releases demo', function () {\n    var done = this.async();\n\n    shell.cd(grunt.config('config').demo);\n\n    Q()\n      .then(gruntBuild)\n      .then(gruntRelease)\n      .then(function() {\n        shell.cd('../');\n      })\n      .catch(function(msg){\n        grunt.fail.warn(msg || 'failed to release demo')\n      })\n      .finally(done);\n\n    function run(cmd) {\n      var deferred = Q.defer();\n      var generator = shell.exec(cmd, {async:true});\n      generator.stdout.on('data', function (data) {\n        grunt.verbose.writeln(data);\n      });\n      generator.on('exit', function (code) {\n        deferred.resolve();\n      });\n\n      return deferred.promise;\n    }\n\n    function gruntBuild() {\n      return run('grunt');\n    }\n\n    function gruntRelease() {\n      return run('grunt buildcontrol:heroku');\n    }\n  });\n\n  grunt.registerTask('deps', function(target) {\n    if (!target || target === 'app') grunt.task.run(['updateFixtures']);\n    grunt.task.run(['david:' + (target || '')]);\n  });\n\n  grunt.registerTask('demo', [\n    'clean:demo',\n    'generateDemo'\n  ]);\n\n  grunt.registerTask('releaseDemo', [\n    'demo',\n    'releaseDemoBuild',\n    'buildcontrol:release'\n  ]);\n\n  //grunt.registerTask('default', ['bump', 'changelog', 'stage', 'release']);\n};\n","/home/travis/build/npmtest/node-npmtest-generator-angular-fullstack/node_modules/generator-angular-fullstack/gulpfile.js":"'use strict';\nconst fs = require('fs');\nconst path = require('path');\nconst exec = require('child_process').exec;\nconst _ = require('lodash');\nconst Promise = require('bluebird');\nconst gulp = require('gulp');\nconst gutil = require('gulp-util');\nconst babel = require('gulp-babel');\nconst gulpMocha = require('gulp-mocha');\nconst plumber = require('gulp-plumber');\nconst gulpIf = require('gulp-if');\nconst del = require('del');\nconst lazypipe = require('lazypipe');\nconst runSequence = require('run-sequence');\nconst merge = require('merge-stream');\nconst shell = require('shelljs');\nconst ghPages = require('gulp-gh-pages');\nconst conventionalChangelog = require('gulp-conventional-changelog');\n\nvar watching = false;\n\nconst mocha = lazypipe()\n    .pipe(gulpMocha, {\n        reporter: 'spec',\n        timeout: 120000,\n        slow: 500,\n        globals: {\n            should: require('should')\n        },\n        require: [\n            './mocha.conf'\n        ]\n    });\n\nconst transpile = lazypipe()\n    .pipe(babel);\n\ngulp.task('clean', () => {\n    return del(['generators/**/*', './test/(**|!fixtures/node_modules)/*']);\n});\n\ngulp.task('babel', () => {\n    let generators = gulp.src(['src/generators/**/*.js'])\n    .pipe(gulpIf(watching, plumber()))\n        .pipe(transpile())\n        .pipe(gulp.dest('generators'));\n\n    let test = gulp.src(['src/test/**/*.js'])\n    .pipe(gulpIf(watching, plumber()))\n        .pipe(transpile())\n        .pipe(gulp.dest('test'));\n\n    return merge(generators, test);\n});\n\ngulp.task('watch', () => {\n    watching = true;\n    return gulp.watch('src/**/*.js', ['babel']);\n});\n\ngulp.task('copy', () => {\n    let nonJsGen = gulp.src(['src/generators/**/*', '!src/generators/**/*.js'], {dot: true})\n        .pipe(gulp.dest('generators'));\n\n    let nonJsTest = gulp.src(['src/test/**/*', '!src/test/**/*.js'], {dot: true})\n        .pipe(gulp.dest('test'));\n\n    return merge(nonJsGen, nonJsTest);\n});\n\ngulp.task('build', cb => {\n    return runSequence(\n        'clean',\n        'babel',\n        'copy',\n        cb\n    );\n});\n\nvar processJson = function(src, dest, opt) {\n    return new Promise((resolve, reject) => {\n        // read file, strip all ejs conditionals, and parse as json\n        fs.readFile(path.resolve(src), 'utf8', (err, data) => {\n            if(err) return reject(err);\n\n            var json = JSON.parse(data.replace(/<%(.*)%>/g, ''));\n\n            if(/package.json/g.test(src) && opt.test) {\n                delete json.scripts.postinstall;\n                json.scripts['update-webdriver'] = 'node node_modules/gulp-protractor-runner/node_modules/protractor/bin/webdriver-manager update || node node_modules/protractor/bin/webdriver-manager update';\n            }\n\n            // set properties\n            json.name = opt.appName;\n            json.description = opt.private\n                ? null\n                : 'The purpose of this repository is to track all the possible dependencies of an application created by generator-angular-fullstack.';\n            json.version = opt.genVer;\n            json.private = opt.private;\n\n            // stringify json and write it to the destination\n            fs.writeFile(path.resolve(dest), JSON.stringify(json, null, 2), err => {\n                if(err) reject(err);\n                else resolve();\n            });\n        });\n    });\n};\n\nfunction updateFixtures(target) {\n    const deps = target === 'deps';\n    const test = target === 'test';\n    const genVer = require('./package.json').version;\n    const dest = __dirname + (deps ? '/angular-fullstack-deps/' : '/test/fixtures/');\n    const appName = deps ? 'angular-fullstack-deps' : 'tempApp';\n\n    return processJson('templates/app/_package.json', dest + 'package.json', {appName, genVer, private: !deps, test: test});\n}\n\ngulp.task('updateFixtures', cb => {\n    return runSequence(['updateFixtures:test', 'updateFixtures:deps'], cb);\n});\ngulp.task('updateFixtures:test', () => {\n    return updateFixtures('test');\n});\ngulp.task('updateFixtures:deps', () => {\n    return updateFixtures('deps');\n});\n\nfunction execAsync(cmd, opt) {\n    return new Promise((resolve, reject) => {\n        exec(cmd, opt, (err, stdout, stderr) => {\n            if(err) {\n                console.log(`stderr: ${stderr}`);\n                return reject(err);\n            }\n\n            return resolve(stdout);\n        })\n    });\n}\n\ngulp.task('installFixtures', function() {\n    gutil.log('installing npm dependencies for generated app');\n    let progress = setInterval(() => {\n        process.stdout.write('.');\n    }, 1 * 1000);\n    shell.cd('test/fixtures');\n\n    let installCommand;\n    if(process.platform === 'win32') {\n        installCommand = 'yarn --version >nul 2>&1 && ( yarn install ) || ( npm install --quiet )';\n    } else {\n        installCommand = 'type yarn &> /dev/null | yarn install || npm install --quiet';\n    }\n\n    execAsync(installCommand, {\n        cwd: '../fixtures'\n    }).then(() => {\n        process.stdout.write('\\n');\n        if(!process.env.SAUCE_USERNAME) {\n            gutil.log('running npm run-script update-webdriver');\n            return execAsync('npm run-script update-webdriver').then(() => {\n                clearInterval(progress);\n                process.stdout.write('\\n');\n                shell.cd('../../');\n            });\n        } else {\n            clearInterval(progress);\n            process.stdout.write('\\n');\n            shell.cd('../../');\n            return Promise.resolve();\n        }\n    });\n});\n\ngulp.task('test', () => {\n    return gulp.src(['test/pre.test.js', 'test/*.test.js'])\n        .pipe(mocha());\n});\n\ngulp.task('updateSubmodules', () => console.log('TODO'));\ngulp.task('changelog', () => console.log('TODO'));\ngulp.task('generateDemo', () => console.log('TODO'));\ngulp.task('demo', () => console.log('TODO')); // ['clean:demo', 'generateDemo']\ngulp.task('releaseDemo', () => console.log('TODO')); //['demo', 'releaseDemoBuild', 'buildcontrol:release']\ngulp.task('releaseDemoBuild', () => console.log('TODO'));\ngulp.task('deps', () => console.log('TODO')); // updateFixtures, david\ngulp.task('release', () => console.log('TODO'));\ngulp.task('lint', () => console.log('TODO')); // ['gulpfile.js', 'src/**/*.js']\n\ngulp.task('daux', () => {\n    return execAsync('daux');\n});\ngulp.task('copy_docs_images', () => {\n  return gulp.src('./media/svg/*')\n    .pipe(gulp.dest('./static/'));\n});\ngulp.task('gh-pages', () => {\n  return gulp.src('./static/**/*')\n    .pipe(ghPages());\n});\ngulp.task('docs', cb => {\n    return runSequence('daux', 'copy_docs_images', 'gh-pages', cb);\n});\n\nlet finalizeContext = function(context, writerOpts, commits, keyCommit) {\n    var gitSemverTags = context.gitSemverTags;\n    var commitGroups = context.commitGroups;\n\n    if((!context.currentTag || !context.previousTag) && keyCommit) {\n        var match = /tag:\\s*(.+?)[,\\)]/gi.exec(keyCommit.gitTags);\n        var currentTag = context.currentTag = context.currentTag || match ? match[1] : null;\n        var index = gitSemverTags.indexOf(currentTag);\n        var previousTag = context.previousTag = gitSemverTags[index + 1];\n\n        if(!previousTag) {\n            if(options.append) {\n              context.previousTag = context.previousTag || commits[0] ? commits[0].hash : null;\n            } else {\n              context.previousTag = context.previousTag || commits[commits.length - 1] ? commits[commits.length - 1].hash : null;\n            }\n        }\n    } else {\n        context.previousTag = context.previousTag || gitSemverTags[0];\n        context.currentTag = context.currentTag || 'v' + context.version;\n    }\n\n    if(typeof context.linkCompare !== 'boolean' && context.previousTag && context.currentTag) {\n        context.linkCompare = true;\n    }\n\n    if(Array.isArray(commitGroups)) {\n        for(var i = 0, commitGroupsLength = commitGroups.length; i < commitGroupsLength; i++) {\n            var commits = commitGroups[i].commits;\n            if(Array.isArray(commits)) {\n                for(var n = 1, commitsLength = commits.length; n < commitsLength; n++) {\n                    var commit = commits[n], prevCommit = commits[n - 1];\n                    if(commit.scope && commit.scope === prevCommit.scope) {\n                        commit.subScope = true;\n                        if(prevCommit.scope && !prevCommit.subScope) {\n                            prevCommit.leadScope = true;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return context;\n};\nlet commitPartial = fs.readFileSync(path.resolve(__dirname, 'task-utils/changelog-templates/commit.hbs')).toString();\n\ngulp.task('changelog', () => {\n  return gulp.src('CHANGELOG.md', {buffer: false})\n    .pipe(conventionalChangelog({\n      preset: 'angular'\n    }, {/*context*/}, {/*git-raw-commits*/}, {/*conventional-commits-parser*/}, {/*conventional-changelog-writer*/\n        finalizeContext,\n        commitPartial\n    }))\n    .pipe(gulp.dest('./'));\n});\n","/home/travis/build/npmtest/node-npmtest-generator-angular-fullstack/node_modules/generator-angular-fullstack/mocha.conf.js":"'use strict';\n\nglobal.DEBUG = !!process.env.DEBUG;\n\nvar fs = require('fs');\nvar Promise = require('bluebird');\nPromise.promisifyAll(fs);\n","/home/travis/build/npmtest/node-npmtest-generator-angular-fullstack/node_modules/generator-angular-fullstack/generators/generator-base.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.genBase = genBase;\nexports.genNamedBase = genNamedBase;\n\nvar _util = require('util');\n\nvar _util2 = _interopRequireDefault(_util);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _underscore = require('underscore.string');\n\nvar _underscore2 = _interopRequireDefault(_underscore);\n\nvar _semver = require('semver');\n\nvar _semver2 = _interopRequireDefault(_semver);\n\nvar _yeomanWelcome = require('yeoman-welcome');\n\nvar _yeomanWelcome2 = _interopRequireDefault(_yeomanWelcome);\n\nvar _util3 = require('./util');\n\nvar genUtils = _interopRequireWildcard(_util3);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// extend lodash with underscore.string\n_lodash2.default.mixin(_underscore2.default.exports());\n\nfunction genBase(self) {\n  self = self || this;\n\n  var yoCheckPromise = void 0;\n  if (!process.env.CI) {\n    yoCheckPromise = genUtils.runCmd('yo --version').then(function (stdout) {\n      if (!_semver2.default.satisfies(_semver2.default.clean(stdout), '>= 1.7.1')) {\n        throw new Error('ERROR: You need to update yo to at least 1.7.1 (npm i -g yo)\\n\\'yo --version\\' output: ' + stdout);\n      }\n    });\n  } else {\n    // CI won't have yo installed\n    yoCheckPromise = Promise.resolve();\n  }\n\n  self.lodash = _lodash2.default;\n  self.yoWelcome = _yeomanWelcome2.default;\n\n  var baseDetermineAppname = self.determineAppname.bind(self);\n  self.determineAppname = function () {\n    if (self['name']) {\n      return self['name'];\n    } else {\n      return baseDetermineAppname();\n    }\n  };\n\n  self.appname = _lodash2.default.camelize(_lodash2.default.slugify(_lodash2.default.humanize(self.determineAppname())));\n  self.scriptAppName = self.appname + genUtils.appSuffix(self);\n\n  self.filters = self.filters || self.config.get('filters');\n\n  // dynamic assertion statements\n  self.expect = function () {\n    return self.filters.expect ? 'expect(' : '';\n  };\n  self.to = function () {\n    return self.filters.expect ? ').to' : '.should';\n  };\n\n  // dynamic relative require path\n  self.relativeRequire = genUtils.relativeRequire.bind(self);\n  // process template directory\n  self.processDirectory = genUtils.processDirectory.bind(self);\n  // rewrite a file in place\n  self.rewriteFile = genUtils.rewriteFile;\n\n  return yoCheckPromise;\n}\n\nfunction genNamedBase(self) {\n  self = self || this;\n\n  // extend genBase\n  return genBase(self).then(function () {\n    var name = self.name.replace(/\\//g, '-');\n\n    self.cameledName = _lodash2.default.camelize(name);\n    self.classedName = _lodash2.default.classify(name);\n\n    self.basename = _path2.default.basename(self.name);\n    self.dirname = self.name.indexOf('/') >= 0 ? _path2.default.dirname(self.name) : self.name;\n  });\n}","/home/travis/build/npmtest/node-npmtest-generator-angular-fullstack/node_modules/generator-angular-fullstack/generators/util.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.runCmd = runCmd;\nexports.rewriteFile = rewriteFile;\nexports.rewrite = rewrite;\nexports.appSuffix = appSuffix;\nexports.relativeRequire = relativeRequire;\nexports.processDirectory = processDirectory;\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _glob = require('glob');\n\nvar _glob2 = _interopRequireDefault(_glob);\n\nvar _bluebird = require('bluebird');\n\nvar _bluebird2 = _interopRequireDefault(_bluebird);\n\nvar _child_process = require('child_process');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar DEBUG = !!process.env.DEBUG;\n\n/**\n * @callback doneCallback\n * @param {null|Error} err\n */\n\n/**\n * Run the given command in a child process\n * @param {string} cmd - command to run\n * @returns {Promise}\n */\nfunction runCmd(cmd) {\n  return new _bluebird2.default(function (resolve, reject) {\n    (0, _child_process.exec)(cmd, {}, function (err, stdout, stderr) {\n      if (err) {\n        console.error(stdout);\n        return reject(err);\n      } else {\n        if (DEBUG) console.log(cmd + ' stdout: ' + stdout);\n        return resolve(stdout);\n      }\n    });\n  });\n}\n\nfunction expandFiles(pattern, options) {\n  options = options || {};\n  var cwd = options.cwd || process.cwd();\n  return _glob2.default.sync(pattern, options).filter(function (filepath) {\n    return _fs2.default.statSync(_path2.default.join(cwd, filepath)).isFile();\n  });\n}\n\nfunction rewriteFile(args) {\n  args.path = args.path || process.cwd();\n  var fullPath = _path2.default.join(args.path, args.file);\n\n  args.haystack = _fs2.default.readFileSync(fullPath, 'utf8');\n  var body = rewrite(args);\n\n  _fs2.default.writeFileSync(fullPath, body);\n}\n\nfunction escapeRegExp(str) {\n  return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');\n}\n\nfunction rewrite(args) {\n  // check if splicable is already in the body text\n  var re = new RegExp(args.splicable.map(function (line) {\n    return '\\s*' + escapeRegExp(line);\n  }).join('\\n'));\n\n  if (re.test(args.haystack)) {\n    return args.haystack;\n  }\n\n  var lines = args.haystack.split('\\n');\n\n  var otherwiseLineIndex = -1;\n  lines.forEach(function (line, i) {\n    if (line.indexOf(args.needle) !== -1) {\n      otherwiseLineIndex = i;\n    }\n  });\n  if (otherwiseLineIndex === -1) return lines.join('\\n');\n\n  var spaces = 0;\n  while (lines[otherwiseLineIndex].charAt(spaces) === ' ') {\n    spaces += 1;\n  }\n\n  var spaceStr = '';\n  while ((spaces -= 1) >= 0) {\n    spaceStr += ' ';\n  }\n\n  lines.splice(otherwiseLineIndex + 1, 0, args.splicable.map(function (line) {\n    return spaceStr + line;\n  }).join('\\n'));\n\n  return lines.join('\\n');\n}\n\nfunction appSuffix(self) {\n  var suffix = self.options['app-suffix'];\n  return typeof suffix === 'string' ? self.lodash.classify(suffix) : '';\n}\n\nfunction relativeRequire(to, fr) {\n  fr = this.destinationPath(fr || this.filePath);\n  to = this.destinationPath(to);\n  return _path2.default.relative(_path2.default.dirname(fr), to).replace(/\\\\/g, '/') // convert win32 separator to posix\n  .replace(/^(?!\\.\\.)(.*)/, './$1') // prefix non parent path with ./\n  .replace(/[\\/\\\\]index\\.js$/, ''); // strip index.js suffix from path\n}\n\nfunction filterFile(template) {\n  // Find matches for parans\n  var filterMatches = template.match(/\\(([^)]+)\\)/g);\n  var filters = [];\n  if (filterMatches) {\n    filterMatches.forEach(function (filter) {\n      filters.push(filter.replace('(', '').replace(')', ''));\n      template = template.replace(filter, '');\n    });\n  }\n\n  return { name: template, filters: filters };\n}\n\nfunction templateIsUsable(self, filteredFile) {\n  var filters = self.filters || self.config.get('filters');\n  var enabledFilters = [];\n  for (var key in filters) {\n    if (filters[key]) enabledFilters.push(key);\n  }\n  var matchedFilters = self.lodash.intersection(filteredFile.filters, enabledFilters);\n  // check that all filters on file are matched\n  if (filteredFile.filters.length && matchedFilters.length !== filteredFile.filters.length) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * \n */\nfunction processDirectory(source, destination) {\n  var self = this;\n  var root = _path2.default.isAbsolute(source) ? source : _path2.default.join(self.sourceRoot(), source);\n  var files = expandFiles('**', { dot: true, cwd: root });\n  var dest, src;\n\n  files.forEach(function (f) {\n    var filteredFile = filterFile(f);\n    if (self.basename) {\n      filteredFile.name = filteredFile.name.replace('basename', self.basename);\n    }\n    if (self.name) {\n      filteredFile.name = filteredFile.name.replace('name', self.name);\n    }\n    var name = filteredFile.name;\n    var copy = false,\n        stripped;\n\n    src = _path2.default.join(root, f);\n    dest = _path2.default.join(destination, name);\n\n    if (self.filters.ts && dest.indexOf('client') > -1 && dest.indexOf('.json') === -1) {\n      dest = dest.replace('.js', '.ts');\n    }\n\n    if (_path2.default.basename(dest).indexOf('_') === 0) {\n      stripped = _path2.default.basename(dest).replace(/^_/, '');\n      dest = _path2.default.join(_path2.default.dirname(dest), stripped);\n    }\n\n    if (_path2.default.basename(dest).indexOf('!') === 0) {\n      stripped = _path2.default.basename(dest).replace(/^!/, '');\n      dest = _path2.default.join(_path2.default.dirname(dest), stripped);\n      copy = true;\n    }\n\n    if (templateIsUsable(self, filteredFile)) {\n      if (copy) {\n        self.fs.copy(src, dest);\n      } else {\n        self.filePath = dest;\n        self.fs.copyTpl(src, dest, self);\n        delete self.filePath;\n      }\n    }\n  });\n}","/home/travis/build/npmtest/node-npmtest-generator-angular-fullstack/node_modules/generator-angular-fullstack/generators/insight-init.js":"'use strict';\n\nvar Insight = require('insight');\nvar pkg = require('../package.json');\n\nvar insight = new Insight({\n    // Google Analytics tracking code\n    trackingCode: 'UA-48443700-4',\n    pkg: pkg\n});\n\nif (process.stdout.isTTY === undefined) insight.optOut = false;\n\n// ask for permission the first time\n// if(insight.optOut === undefined) {\n//     insight.askPermission();\n// }\n\n// insight.track('foo', 'bar');\n// recorded in Analytics as `/foo/bar`\n\nmodule.exports = insight;","/home/travis/build/npmtest/node-npmtest-generator-angular-fullstack/node_modules/generator-angular-fullstack/task-utils/grunt.js":"'use strict';\n\nvar path = require('path');\nvar fs = require('fs');\nvar Q = require('q');\n\nexports = module.exports = function(grunt) {\n  var self;\n  return self = {\n    gitCmd: function(args, opts, done) {\n      grunt.util.spawn({\n        cmd: process.platform === 'win32' ? 'git.cmd' : 'git',\n        args: args,\n        opts: opts || {}\n      }, done);\n    },\n\n    gitCmdAsync: function(args, opts) {\n      return function() {\n        var deferred = Q.defer();\n        self.gitCmd(args, opts, function(err) {\n          if (err) { return deferred.reject(err); }\n          deferred.resolve();\n        });\n        return deferred.promise;\n      };\n    },\n\n    conventionalChangelog: {\n      finalizeContext: function(context, writerOpts, commits, keyCommit) {\n        var gitSemverTags = context.gitSemverTags;\n        var commitGroups = context.commitGroups;\n\n        if ((!context.currentTag || !context.previousTag) && keyCommit) {\n          var match = /tag:\\s*(.+?)[,\\)]/gi.exec(keyCommit.gitTags);\n          var currentTag = context.currentTag = context.currentTag || match ? match[1] : null;\n          var index = gitSemverTags.indexOf(currentTag);\n          var previousTag = context.previousTag = gitSemverTags[index + 1];\n\n          if (!previousTag) {\n            if (options.append) {\n              context.previousTag = context.previousTag || commits[0] ? commits[0].hash : null;\n            } else {\n              context.previousTag = context.previousTag || commits[commits.length - 1] ? commits[commits.length - 1].hash : null;\n            }\n          }\n        } else {\n          context.previousTag = context.previousTag || gitSemverTags[0];\n          context.currentTag = context.currentTag || 'v' + context.version;\n        }\n\n        if (typeof context.linkCompare !== 'boolean' && context.previousTag && context.currentTag) {\n          context.linkCompare = true;\n        }\n\n        if (Array.isArray(commitGroups)) {\n          for (var i = 0, commitGroupsLength = commitGroups.length; i < commitGroupsLength; i++) {\n            var commits = commitGroups[i].commits;\n            if (Array.isArray(commits)) {\n              for (var n = 1, commitsLength = commits.length; n < commitsLength; n++) {\n                var commit = commits[n], prevCommit = commits[n - 1];\n                if (commit.scope && commit.scope === prevCommit.scope) {\n                  commit.subScope = true;\n                  if (prevCommit.scope && !prevCommit.subScope) {\n                    prevCommit.leadScope = true;\n                  }\n                }\n              }\n            }\n          }\n        }\n        return context;\n      },\n      commitPartial: fs.readFileSync(path.resolve(__dirname, 'changelog-templates', 'commit.hbs')).toString()\n    }\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-generator-angular-fullstack/node_modules/generator-angular-fullstack/templates/app/gulpfile.babel.js":"// Generated on <%= (new Date).toISOString().split('T')[0] %> using <%= rootGeneratorName() %> <%= rootGeneratorVersion() %>\n'use strict';\n\nimport _ from 'lodash';\nimport del from 'del';\nimport gulp from 'gulp';\nimport grunt from 'grunt';\nimport path from 'path';\nimport through2 from 'through2';\nimport gulpLoadPlugins from 'gulp-load-plugins';\nimport http from 'http';\nimport open from 'open';\nimport lazypipe from 'lazypipe';\nimport nodemon from 'nodemon';\nimport {Server as KarmaServer} from 'karma';\nimport runSequence from 'run-sequence';\nimport {protractor, webdriver_update} from 'gulp-protractor';\nimport {Instrumenter} from 'isparta';\nimport webpack from 'webpack-stream';\nimport makeWebpackConfig from './webpack.make';\n\nvar plugins = gulpLoadPlugins();\nvar config;\n\nconst clientPath = 'client';\nconst serverPath = 'server';\nconst paths = {\n    client: {\n        assets: `${clientPath}/assets/**/*`,\n        images: `${clientPath}/assets/images/**/*`,\n        revManifest: `${clientPath}/assets/rev-manifest.json`,\n        scripts: [\n            `${clientPath}/**/!(*.spec|*.mock).<%= scriptExt %>`<% if(filters.ts) { %>,\n            `!${clientPath}/{typings,test_typings}/**/*`<% } %>\n        ],\n        styles: [`${clientPath}/{app,components}/**/*.<%= styleExt %>`],\n        mainStyle: `${clientPath}/app/app.<%= styleExt %>`,\n        views: `${clientPath}/{app,components}/**/*.<%= templateExt %>`,\n        mainView: `${clientPath}/index.html`,\n        test: [`${clientPath}/{app,components}/**/*.{spec,mock}.<%= scriptExt %>`],\n        e2e: ['e2e/**/*.spec.js']\n    },\n    server: {\n        scripts: [\n          `${serverPath}/**/!(*.spec|*.integration).js`,\n          `!${serverPath}/config/local.env.sample.js`\n        ],\n        json: [`${serverPath}/**/*.json`],\n        test: {\n          integration: [`${serverPath}/**/*.integration.js`, 'mocha.global.js'],\n          unit: [`${serverPath}/**/*.spec.js`, 'mocha.global.js']\n        }\n    },\n    karma: 'karma.conf.js',\n    dist: 'dist'\n};\n\n/********************\n * Helper functions\n ********************/\n\nfunction onServerLog(log) {\n    console.log(plugins.util.colors.white('[') +\n        plugins.util.colors.yellow('nodemon') +\n        plugins.util.colors.white('] ') +\n        log.message);\n}\n\nfunction checkAppReady(cb) {\n    var options = {\n        host: 'localhost',\n        port: config.port\n    };\n    http\n        .get(options, () => cb(true))\n        .on('error', () => cb(false));\n}\n\n// Call page until first success\nfunction whenServerReady(cb) {\n    var serverReady = false;\n    var appReadyInterval = setInterval(() =>\n        checkAppReady((ready) => {\n            if (!ready || serverReady) {\n                return;\n            }\n            clearInterval(appReadyInterval);\n            serverReady = true;\n            cb();\n        }),\n        100);\n}\n\n/********************\n * Reusable pipelines\n ********************/\n\nlet lintClientScripts = lazypipe()<% if(filters.babel) { %>\n    .pipe(plugins.eslint, `${clientPath}/.eslintrc`)\n    .pipe(plugins.eslint.format);<% } %><% if(filters.ts) { %>\n    .pipe(plugins.tslint, require(`./${clientPath}/tslint.json`))\n    .pipe(plugins.tslint.report, 'verbose', {emitError: false});<% } %>\n\nconst lintClientTestScripts = lazypipe()\n    <%_ if(filters.babel) { -%>\n    .pipe(plugins.eslint, {\n        configFile: `${clientPath}/.eslintrc`,\n        envs: [\n            'browser',\n            'es6',\n            'mocha'\n        ]\n    })\n    .pipe(plugins.eslint.format);\n    <%_ } -%>\n    <%_ if(filters.ts) { -%>\n    .pipe(plugins.tslint, require(`./${clientPath}/tslint.json`))\n    .pipe(plugins.tslint.report, 'verbose', {emitError: false});\n    <%_ } -%>\n\nlet lintServerScripts = lazypipe()\n    .pipe(plugins.eslint, `${serverPath}/.eslintrc`)\n    .pipe(plugins.eslint.format);\n\nlet lintServerTestScripts = lazypipe()\n    .pipe(plugins.eslint, {\n        configFile: `${serverPath}/.eslintrc`,\n        envs: [\n            'node',\n            'es6',\n            'mocha'\n        ]\n    })\n    .pipe(plugins.eslint.format);\n\nlet transpileServer = lazypipe()\n    .pipe(plugins.sourcemaps.init)\n    .pipe(plugins.babel, {\n        plugins: [\n            'transform-class-properties',\n            'transform-runtime'\n        ]\n    })\n    .pipe(plugins.sourcemaps.write, '.');\n\nlet mocha = lazypipe()\n    .pipe(plugins.mocha, {\n        reporter: 'spec',\n        timeout: 5000,\n        require: [\n            './mocha.conf'\n        ]\n    });\n\nlet istanbul = lazypipe()\n    .pipe(plugins.istanbul.writeReports)\n    .pipe(plugins.istanbulEnforcer, {\n        thresholds: {\n            global: {\n                lines: 80,\n                statements: 80,\n                branches: 80,\n                functions: 80\n            }\n        },\n        coverageDirectory: './coverage',\n        rootDirectory : ''\n    });\n\n/********************\n * Env\n ********************/\n\ngulp.task('env:all', () => {\n    let localConfig;\n    try {\n        localConfig = require(`./${serverPath}/config/local.env`);\n    } catch (e) {\n        localConfig = {};\n    }\n    plugins.env({\n        vars: localConfig\n    });\n});\ngulp.task('env:test', () => {\n    plugins.env({\n        vars: {NODE_ENV: 'test'}\n    });\n});\ngulp.task('env:prod', () => {\n    plugins.env({\n        vars: {NODE_ENV: 'production'}\n    });\n});\n\n/********************\n * Tasks\n ********************/\n\ngulp.task('inject', cb => {\n    runSequence(['inject:<%= styleExt %>'], cb);\n});\n\ngulp.task('inject:<%= styleExt %>', () => {\n    return gulp.src(paths.client.mainStyle)\n        .pipe(plugins.inject(\n            gulp.src(_.union(paths.client.styles, ['!' + paths.client.mainStyle]), {read: false})\n                .pipe(plugins.sort()),\n            {\n                <%_ if(filters.stylus || filters.css) { -%>\n                starttag: '/* inject:<%= styleExt %> */',\n                endtag: '/* endinject */',\n                <%_ } -%>\n                transform: (filepath) => {\n                    let newPath = filepath\n                        .replace(`/${clientPath}/app/`, '')\n                        .replace(`/${clientPath}/components/`, '../components/')\n                        .replace(/_(.*).<%= styleExt %>/, (match, p1, offset, string) => p1)<% if(filters.css) { %>;<% } else { %>\n                        .replace('.<%= styleExt %>', '');<% } %>\n                    return `@import '${newPath}';`;\n                }\n            }))\n        .pipe(gulp.dest(`${clientPath}/app`));\n});\n\ngulp.task('webpack:dev', function() {\n    const webpackDevConfig = makeWebpackConfig({ DEV: true });\n    return gulp.src(webpackDevConfig.entry.app)\n        .pipe(plugins.plumber())\n        .pipe(webpack(webpackDevConfig))\n        .pipe(gulp.dest('.tmp'));\n});\n\ngulp.task('webpack:dist', function() {\n    const webpackDistConfig = makeWebpackConfig({ BUILD: true });\n    return gulp.src(webpackDistConfig.entry.app)\n        .pipe(webpack(webpackDistConfig))\n        .on('error', (err) => {\n          this.emit('end'); // Recover from errors\n        })\n        .pipe(gulp.dest(`${paths.dist}/client`));\n});\n\ngulp.task('webpack:test', function() {\n    const webpackTestConfig = makeWebpackConfig({ TEST: true });\n    return gulp.src(webpackTestConfig.entry.app)\n        .pipe(webpack(webpackTestConfig))\n        .pipe(gulp.dest('.tmp'));\n});\n\ngulp.task('webpack:e2e', function() {\n    const webpackE2eConfig = makeWebpackConfig({ E2E: true });\n    return gulp.src(webpackE2eConfig.entry.app)\n        .pipe(webpack(webpackE2eConfig))\n        .pipe(gulp.dest('.tmp'));\n});<% if(filters.ts) { %>\n\n// Install DefinitelyTyped TypeScript definition files\ngulp.task('typings', () => {\n    return gulp.src(\"./typings.json\")\n        .pipe(plugins.typings());\n});<% } %>\n\ngulp.task('styles', () => {\n    <%_ if(!filters.css) { _%>\n    return gulp.src(paths.client.mainStyle)\n    <%_ } else { _%>\n    return gulp.src(paths.client.styles)\n    <%_ } _%>\n        .pipe(styles())\n        .pipe(gulp.dest('.tmp/app'));\n});\n\ngulp.task('transpile:server', () => {\n    return gulp.src(_.union(paths.server.scripts, paths.server.json))\n        .pipe(transpileServer())\n        .pipe(gulp.dest(`${paths.dist}/${serverPath}`));\n});\n\ngulp.task('lint:scripts', cb => runSequence(['lint:scripts:client', 'lint:scripts:server'], cb));\n\ngulp.task('lint:scripts:client', () => {\n    return gulp.src(_.union(\n        paths.client.scripts,\n        _.map(paths.client.test, blob => '!' + blob)\n    ))\n        .pipe(lintClientScripts());\n});\n\ngulp.task('lint:scripts:server', () => {\n    return gulp.src(_.union(paths.server.scripts, _.map(paths.server.test, blob => '!' + blob)))\n        .pipe(lintServerScripts());\n});\n\ngulp.task('lint:scripts:clientTest', () => {\n    return gulp.src(paths.client.test)\n        .pipe(lintClientScripts());\n});\n\ngulp.task('lint:scripts:serverTest', () => {\n    return gulp.src(paths.server.test)\n        .pipe(lintServerTestScripts());\n});\n\ngulp.task('jscs', () => {\n  return gulp.src(_.union(paths.client.scripts, paths.server.scripts))\n      .pipe(plugins.jscs())\n      .pipe(plugins.jscs.reporter());\n});\n\ngulp.task('clean:tmp', () => del(['.tmp/**/*'], {dot: true}));\n\ngulp.task('start:client', cb => {\n    whenServerReady(() => {\n        open('http://localhost:' + config.browserSyncPort);\n        cb();\n    });\n});\n\ngulp.task('start:server', () => {\n    process.env.NODE_ENV = process.env.NODE_ENV || 'development';\n    config = require(`./${serverPath}/config/environment`);\n    nodemon(`-w ${serverPath} ${serverPath}`)\n        .on('log', onServerLog);\n});\n\ngulp.task('start:server:prod', () => {\n    process.env.NODE_ENV = process.env.NODE_ENV || 'production';\n    config = require(`./${paths.dist}/${serverPath}/config/environment`);\n    nodemon(`-w ${paths.dist}/${serverPath} ${paths.dist}/${serverPath}`)\n        .on('log', onServerLog);\n});\n\ngulp.task('start:server:debug', () => {\n    process.env.NODE_ENV = process.env.NODE_ENV || 'development';\n    config = require(`./${serverPath}/config/environment`);\n    // nodemon(`-w ${serverPath} --debug=<%= debugPort %> --debug-brk ${serverPath}`)\n    nodemon(`-w ${serverPath} --inspect --debug-brk ${serverPath}`)\n        .on('log', onServerLog);\n});\n\ngulp.task('watch', () => {\n    var testFiles = _.union(paths.client.test, paths.server.test.unit, paths.server.test.integration);\n\n    plugins.watch(_.union(paths.server.scripts, testFiles))\n        .pipe(plugins.plumber())\n        .pipe(lintServerScripts());\n\n    plugins.watch(_.union(paths.server.test.unit, paths.server.test.integration))\n        .pipe(plugins.plumber())\n        .pipe(lintServerTestScripts());\n});\n\ngulp.task('serve', cb => {\n    runSequence(\n        [\n            'clean:tmp',\n            'lint:scripts',\n            'inject',\n            'copy:fonts:dev',\n            'env:all'<% if(filters.ts) { %>,\n            'typings'<% } %>\n        ],\n        // 'webpack:dev',\n        ['start:server', 'start:client'],\n        'watch',\n        cb\n    );\n});\n\ngulp.task('serve:debug', cb => {\n    runSequence(\n        [\n            'clean:tmp',\n            'lint:scripts',\n            'inject',\n            'copy:fonts:dev',\n            'env:all'<% if(filters.ts) { %>,\n            'typings'<% } %>\n        ],\n        'webpack:dev',\n        ['start:server:debug', 'start:client'],\n        'watch',\n        cb\n    );\n});\n\ngulp.task('serve:dist', cb => {\n    runSequence(\n        'build',\n        'env:all',\n        'env:prod',\n        ['start:server:prod', 'start:client'],\n        cb);\n});\n\ngulp.task('test', cb => {\n    return runSequence('test:server', 'test:client', cb);\n});\n\ngulp.task('test:server', cb => {\n    runSequence(\n        'env:all',\n        'env:test',\n        'mocha:unit',\n        'mocha:integration',\n        cb);\n});\n\ngulp.task('mocha:unit', () => {\n    return gulp.src(paths.server.test.unit)\n        .pipe(mocha());\n});\n\ngulp.task('mocha:integration', () => {\n    return gulp.src(paths.server.test.integration)\n        .pipe(mocha());\n});\n\ngulp.task('test:server:coverage', cb => {\n  runSequence('coverage:pre',\n              'env:all',\n              'env:test',\n              'coverage:unit',\n              'coverage:integration',\n              cb);\n});\n\ngulp.task('coverage:pre', () => {\n  return gulp.src(paths.server.scripts)\n    // Covering files\n    .pipe(plugins.istanbul({\n        instrumenter: Instrumenter, // Use the isparta instrumenter (code coverage for ES6)\n        includeUntested: true\n    }))\n    // Force `require` to return covered files\n    .pipe(plugins.istanbul.hookRequire());\n});\n\ngulp.task('coverage:unit', () => {\n    return gulp.src(paths.server.test.unit)\n        .pipe(mocha())\n        .pipe(istanbul())\n        // Creating the reports after tests ran\n});\n\ngulp.task('coverage:integration', () => {\n    return gulp.src(paths.server.test.integration)\n        .pipe(mocha())\n        .pipe(istanbul())\n        // Creating the reports after tests ran\n});\n\n// Downloads the selenium webdriver\ngulp.task('webdriver_update', webdriver_update);\n\ngulp.task('test:e2e', ['webpack:e2e', 'env:all', 'env:test', 'start:server', 'webdriver_update'], cb => {\n    gulp.src(paths.client.e2e)\n        .pipe(protractor({\n            configFile: 'protractor.conf.js',\n        }))\n        .on('error', e => { throw e })\n        .on('end', () => { process.exit() });\n});\n\ngulp.task('test:client', done => {\n    new KarmaServer({\n      configFile: `${__dirname}/${paths.karma}`,\n      singleRun: true\n    }, err => {\n        done(err);\n        process.exit(err);\n    }).start();\n});\n\n/********************\n * Build\n ********************/\n\ngulp.task('build', cb => {\n    runSequence(\n        [\n            'clean:dist',\n            'clean:tmp'\n        ],\n        'inject',\n        'transpile:server',\n        [\n            'build:images'<% if(filters.ts) { %>,\n            'typings'<% } %>\n        ],\n        [\n            'copy:extras',\n            'copy:assets',\n            'copy:fonts:dist',\n            'copy:server',\n            'webpack:dist'\n        ],\n        'revReplaceWebpack',\n        cb);\n});\n\ngulp.task('clean:dist', () => del([`${paths.dist}/!(.git*|.openshift|Procfile)**`], {dot: true}));\n\ngulp.task('build:images', () => {\n    return gulp.src(paths.client.images)\n        .pipe(plugins.imagemin([\n            plugins.imagemin.optipng({optimizationLevel: 5}),\n            plugins.imagemin.jpegtran({progressive: true}),\n            plugins.imagemin.gifsicle({interlaced: true}),\n            plugins.imagemin.svgo({plugins: [{removeViewBox: false}]})\n        ]))\n        .pipe(plugins.rev())\n        .pipe(gulp.dest(`${paths.dist}/${clientPath}/assets/images`))\n        .pipe(plugins.rev.manifest(`${paths.dist}/${paths.client.revManifest}`, {\n            base: `${paths.dist}/${clientPath}/assets`,\n            merge: true\n        }))\n        .pipe(gulp.dest(`${paths.dist}/${clientPath}/assets`));\n});\n\ngulp.task('revReplaceWebpack', function() {\n    return gulp.src('dist/client/app.*.js')\n        .pipe(plugins.revReplace({manifest: gulp.src(`${paths.dist}/${paths.client.revManifest}`)}))\n        .pipe(gulp.dest('dist/client'));\n});\n\ngulp.task('copy:extras', () => {\n    return gulp.src([\n        `${clientPath}/favicon.ico`,\n        `${clientPath}/robots.txt`,\n        `${clientPath}/.htaccess`\n    ], { dot: true })\n        .pipe(gulp.dest(`${paths.dist}/${clientPath}`));\n});\n\n/**\n * turns 'bootstrap/fonts/font.woff' into 'bootstrap/font.woff'\n */\nfunction flatten() {\n    return through2.obj(function(file, enc, next) {\n        if(!file.isDirectory()) {\n            try {\n                let dir = path.dirname(file.relative).split(path.sep)[0];\n                let fileName = path.normalize(path.basename(file.path));\n                file.path = path.join(file.base, path.join(dir, fileName));\n                this.push(file);\n            } catch(e) {\n                this.emit('error', new Error(e));\n            }\n        }\n        next();\n    });\n}\ngulp.task('copy:fonts:dev', () => {\n    return gulp.src('node_modules/{bootstrap,font-awesome}/fonts/*')\n        .pipe(flatten())\n        .pipe(gulp.dest(`${clientPath}/assets/fonts`));\n});\ngulp.task('copy:fonts:dist', () => {\n    return gulp.src('node_modules/{bootstrap,font-awesome}/fonts/*')\n        .pipe(flatten())\n        .pipe(gulp.dest(`${paths.dist}/${clientPath}/assets/fonts`));\n});\n\ngulp.task('copy:assets', () => {\n    return gulp.src([paths.client.assets, '!' + paths.client.images])\n        .pipe(gulp.dest(`${paths.dist}/${clientPath}/assets`));\n});\n\ngulp.task('copy:server', () => {\n    return gulp.src([\n        'package.json'\n    ], {cwdbase: true})\n        .pipe(gulp.dest(paths.dist));\n});\n\n/********************\n * Grunt ported tasks\n ********************/\n\ngrunt.initConfig({\n    buildcontrol: {\n        options: {\n            dir: paths.dist,\n            commit: true,\n            push: true,\n            connectCommits: false,\n            message: 'Built %sourceName% from commit %sourceCommit% on branch %sourceBranch%'\n        },\n        heroku: {\n            options: {\n                remote: 'heroku',\n                branch: 'master'\n            }\n        },\n        openshift: {\n            options: {\n                remote: 'openshift',\n                branch: 'master'\n            }\n        }\n    }\n});\n\ngrunt.loadNpmTasks('grunt-build-control');\n\ngulp.task('buildcontrol:heroku', function(done) {\n    grunt.tasks(\n        ['buildcontrol:heroku'],    //you can add more grunt tasks in this array\n        {gruntfile: false}, //don't look for a Gruntfile - there is none. :-)\n        function() {done();}\n    );\n});\ngulp.task('buildcontrol:openshift', function(done) {\n    grunt.tasks(\n        ['buildcontrol:openshift'],    //you can add more grunt tasks in this array\n        {gruntfile: false}, //don't look for a Gruntfile - there is none. :-)\n        function() {done();}\n    );\n});\n","/home/travis/build/npmtest/node-npmtest-generator-angular-fullstack/node_modules/generator-angular-fullstack/templates/app/karma.conf.js":"// Karma configuration\n// http://karma-runner.github.io/0.13/config/configuration-file.html\n/*eslint-env node*/\n\nimport makeWebpackConfig from './webpack.make';\n\nmodule.exports = function(config) {\n  config.set({\n    // base path, that will be used to resolve files and exclude\n    basePath: '',\n\n    // testing framework to use (jasmine/mocha/qunit/...)<% if (filters.jasmine) { %>\n    frameworks: ['jasmine'],<% } if (filters.mocha) { %>\n    frameworks: ['mocha', 'chai', 'sinon-chai', 'chai-as-promised', 'chai-things'],\n\n    client: {\n      mocha: {\n        timeout: 5000 // set default mocha spec timeout\n      }\n    },<% } %>\n\n    // list of files / patterns to load in the browser\n    files: ['spec.js'],\n\n    preprocessors: {\n      'spec.js': ['webpack']\n    },\n\n    webpack: makeWebpackConfig({ TEST: true }),\n\n    webpackMiddleware: {\n      // webpack-dev-middleware configuration\n      // i. e.\n      noInfo: true\n    },\n\n    coverageReporter: {\n      reporters: [{\n        type: 'html', //produces a html document after code is run\n        subdir: 'client'\n      }, {\n        type: 'json',\n        subdir: '.',\n        file: 'client-coverage.json'\n      }],\n      dir: 'coverage/' //path to created html doc\n    },\n\n    plugins: [\n      require('karma-chrome-launcher'),\n      require('karma-coverage'),\n      require('karma-firefox-launcher'),\n      <%_ if(filters.mocha) { _%>\n      require('karma-mocha'),\n      require('karma-chai-plugins'),<% } %>\n      <%_ if(filters.jasmine) { _%>\n      require('karma-jasmine'),<% } %>\n      require('karma-spec-reporter'),\n      require('karma-phantomjs-launcher'),\n      require('karma-script-launcher'),\n      require('karma-webpack'),\n      require('karma-sourcemap-loader')\n    ],\n\n    // list of files / patterns to exclude\n    exclude: [],\n\n    // web server port\n    port: <%= devPort %>,\n\n    // level of logging\n    // possible values: LOG_DISABLE || LOG_ERROR || LOG_WARN || LOG_INFO || LOG_DEBUG\n    logLevel: config.LOG_INFO,\n\n    // reporter types:\n    // - dots\n    // - progress (default)\n    // - spec (karma-spec-reporter)\n    // - junit\n    // - growl\n    // - coverage\n    reporters: ['spec', 'coverage'],\n\n    // enable / disable watching file and executing tests whenever any file changes\n    autoWatch: false,\n\n    // Start these browsers, currently available:\n    // - Chrome\n    // - ChromeCanary\n    // - Firefox\n    // - Opera\n    // - Safari (only Mac)\n    // - PhantomJS\n    // - IE (only Windows)\n    browsers: ['PhantomJS'],\n\n    // Continuous Integration mode\n    // if true, it capture browsers, run tests and exit\n    singleRun: false\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-generator-angular-fullstack/node_modules/generator-angular-fullstack/templates/app/mocha.global.js":"import app from './';<% if (filters.mongoose) { %>\nimport mongoose from 'mongoose';<% } %>\n\nafter(function(done) {\n  app.angularFullstack.on('close', () => done());<% if (filters.mongoose) { %>\n  mongoose.connection.close();<% } %>\n  app.angularFullstack.close();\n});\n","/home/travis/build/npmtest/node-npmtest-generator-angular-fullstack/node_modules/generator-angular-fullstack/templates/app/protractor.conf.js":"// Protractor configuration\n// https://github.com/angular/protractor/blob/master/referenceConf.js\n\n'use strict';\n\nvar config = {\n  // The timeout for each script run on the browser. This should be longer\n  // than the maximum time your application needs to stabilize between tasks.\n  allScriptsTimeout: 110000,\n\n  // A base URL for your application under test. Calls to protractor.get()\n  // with relative paths will be prepended with this.\n  baseUrl: 'http://localhost:' + (process.env.PORT || '<%= devPort %>'),\n\n  // Credientials for Saucelabs\n  sauceUser: process.env.SAUCE_USERNAME,\n\n  sauceKey: process.env.SAUCE_ACCESS_KEY,\n\n  // list of files / patterns to load in the browser\n  specs: [\n    'e2e/**/*.spec.js'\n  ],\n\n  // Patterns to exclude.\n  exclude: [],\n\n  // ----- Capabilities to be passed to the webdriver instance ----\n  //\n  // For a full list of available capabilities, see\n  // https://code.google.com/p/selenium/wiki/DesiredCapabilities\n  // and\n  // https://code.google.com/p/selenium/source/browse/javascript/webdriver/capabilities.js\n  capabilities: {\n    'browserName': 'chrome',\n    'name': 'Fullstack E2E',\n    'tunnel-identifier': process.env.TRAVIS_JOB_NUMBER,\n    'build': process.env.TRAVIS_BUILD_NUMBER\n  },\n\n  // ----- The test framework -----\n  //\n  // Jasmine and Cucumber are fully supported as a test and assertion framework.\n  // Mocha has limited beta support. You will need to include your own\n  // assertion framework if working with mocha.\n  framework: '<% if (filters.jasmine) { %>jasmine2<% } if (filters.mocha) { %>mocha<% } %>',\n<% if (filters.jasmine) { %>\n  // ----- Options to be passed to minijasminenode -----\n  //\n  // See the full list at https://github.com/jasmine/jasmine-npm\n  jasmineNodeOpts: {\n    defaultTimeoutInterval: 30000,\n    print: function() {}  // for jasmine-spec-reporter\n  },<% } if (filters.mocha) { %>\n  // ----- Options to be passed to mocha -----\n  mochaOpts: {\n    reporter: 'spec',\n    timeout: 30000,\n    defaultTimeoutInterval: 30000\n  },<% } %>\n\n  // Prepare environment for tests\n  params: {\n    serverConfig: require('./server/config/environment')\n  },\n\n  onPrepare: function() {\n    require('babel-register');<% if (filters.mocha) { %>\n    // Load Mocha and Chai + plugins\n    require('./mocha.conf');\n\n    // Expose should assertions (see https://github.com/angular/protractor/issues/633)\n    Object.defineProperty(\n      protractor.promise.Promise.prototype,\n      'should',\n      Object.getOwnPropertyDescriptor(Object.prototype, 'should')\n    );\n<% } if (filters.jasmine) { %>\n    var SpecReporter = require('jasmine-spec-reporter');\n    // add jasmine spec reporter\n    jasmine.getEnv().addReporter(new SpecReporter({displayStacktrace: true}));\n<% } %>\n    var serverConfig = config.params.serverConfig;<% if (filters.mongoose) { %>\n\n    // Setup mongo for tests\n    var mongoose = require('mongoose');\n    mongoose.connect(serverConfig.mongo.uri, serverConfig.mongo.options); // Connect to database<% } %>\n  }\n};\n\nconfig.params.baseUrl = config.baseUrl;\nexports.config = config;\n","/home/travis/build/npmtest/node-npmtest-generator-angular-fullstack/node_modules/generator-angular-fullstack/templates/app/spec.js":"'use strict';\n/*eslint-env node*/\nvar testsContext;\n\nrequire('babel-polyfill');\nrequire('angular');\nrequire('angular-mocks');\n<%_ if(filters.uirouter) { _%>\nrequire('./client/components/ui-router/ui-router.mock');<% } %>\n<%_ if(filters.socketio) { _%>\nrequire('./client/components/socket/socket.mock');<% } %>\n\ntestsContext = require.context('./client', true, /\\.spec\\.<%= scriptExt %>$/);\ntestsContext.keys().forEach(testsContext);\n","/home/travis/build/npmtest/node-npmtest-generator-angular-fullstack/node_modules/generator-angular-fullstack/templates/app/webpack.dev.js":"/**\n * Webpack config for development\n */\nmodule.exports = require('./webpack.make')({\n    BUILD: false,\n    TEST: false,\n    DEV: true\n});\n","/home/travis/build/npmtest/node-npmtest-generator-angular-fullstack/node_modules/generator-angular-fullstack/templates/app/webpack.make.js":"'use strict';\n/*eslint-env node*/\nvar webpack = require('webpack');\nvar autoprefixer = require('autoprefixer');\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\nvar HtmlWebpackHarddiskPlugin = require('html-webpack-harddisk-plugin');\nvar ExtractTextPlugin = require('extract-text-webpack-plugin');\nvar CommonsChunkPlugin = webpack.optimize.CommonsChunkPlugin;\nvar fs = require('fs');\nvar path = require('path');\nvar ForkCheckerPlugin = require('awesome-typescript-loader').ForkCheckerPlugin;\n\nmodule.exports = function makeWebpackConfig(options) {\n    /**\n     * Environment type\n     * BUILD is for generating minified builds\n     * TEST is for generating test builds\n     */\n    var BUILD = !!options.BUILD;\n    var TEST = !!options.TEST;\n    var E2E = !!options.E2E;\n    var DEV = !!options.DEV;\n\n    /**\n     * Config\n     * Reference: http://webpack.github.io/docs/configuration.html\n     * This is the object where all configuration gets set\n     */\n    var config = {};\n\n    /**\n     * Entry\n     * Reference: http://webpack.github.io/docs/configuration.html#entry\n     * Should be an empty object if it's generating a test build\n     * Karma will set this when it's a test build\n     */\n    if(TEST) {\n        config.entry = {};\n    } else {\n        config.entry = {\n            app: './client/app/app.<%= scriptExt %>',\n            polyfills: './client/polyfills.<%= scriptExt %>',\n            vendor: [\n                'angular',\n                'angular-animate',\n                'angular-aria',\n                'angular-cookies',\n                'angular-resource',\n                <%_ if(filters.ngroute) { _%>\n                'angular-route',<% } %>\n                'angular-sanitize',\n                <%_ if(filters.socketio) { _%>\n                'angular-socket-io',<% } %>\n                <%_ if(filters.uibootstrap) { -%>\n                'angular-ui-bootstrap',<% } %>\n                <%_ if(filters.uirouter) { _%>\n                'angular-ui-router',<% } %>\n                'lodash'\n            ]\n        };\n    }\n\n    /**\n     * Output\n     * Reference: http://webpack.github.io/docs/configuration.html#output\n     * Should be an empty object if it's generating a test build\n     * Karma will handle setting it up for you when it's a test build\n     */\n    if(TEST) {\n        config.output = {};\n    } else {\n        config.output = {\n            // Absolute output directory\n            path: BUILD ? path.join(__dirname, '/dist/client/') : path.join(__dirname, '/.tmp/'),\n\n            // Output path from the view of the page\n            // Uses webpack-dev-server in development\n            publicPath: BUILD || DEV || E2E ? '/' : `http://localhost:${8080}/`,\n            //publicPath: BUILD ? '/' : 'http://localhost:' + env.port + '/',\n\n            // Filename for entry points\n            // Only adds hash in build mode\n            filename: BUILD ? '[name].[hash].js' : '[name].bundle.js',\n\n            // Filename for non-entry points\n            // Only adds hash in build mode\n            chunkFilename: BUILD ? '[name].[hash].js' : '[name].bundle.js'\n        };\n    }\n\n    <%_ if(filters.ts) { _%>\n    config.resolve = {\n        modulesDirectories: ['node_modules'],\n        extensions: ['', '.js', '.ts']\n    };<% } %>\n\n    if(TEST) {\n        config.resolve = {\n            modulesDirectories: [\n                'node_modules'\n            ],\n            extensions: ['', '.js', '.ts']\n        };\n    }\n\n    /**\n     * Devtool\n     * Reference: http://webpack.github.io/docs/configuration.html#devtool\n     * Type of sourcemap to use per build type\n     */\n    if(TEST) {\n        config.devtool = 'inline-source-map';\n    } else if(BUILD || DEV) {\n        config.devtool = 'source-map';\n    } else {\n        config.devtool = 'eval';\n    }\n\n    /**\n     * Loaders\n     * Reference: http://webpack.github.io/docs/configuration.html#module-loaders\n     * List: http://webpack.github.io/docs/list-of-loaders.html\n     * This handles most of the magic responsible for converting modules\n     */\n    <%_ if(filters.sass) { _%>\n\n    config.sassLoader = {\n        outputStyle: 'compressed',\n        precision: 10,\n        sourceComments: false\n    };<% } %>\n\n    <%_ if(filters.babel) { -%>\n    config.babel = {\n        shouldPrintComment(commentContents) {\n            <%_ if(filters.flow) { -%>\n            let regex = DEV\n                // keep `// @flow`, `/*@ngInject*/`, & flow type comments in dev\n                ? /(@flow|@ngInject|^:)/\n                // keep `/*@ngInject*/`\n                : /@ngInject/;\n            return regex.test(commentContents);\n            <%_ } -%>\n            <%_ if(!filters.flow) { -%>\n            // keep `/*@ngInject*/`\n            return /@ngInject/.test(commentContents);\n            <%_ } -%>\n        }\n    }<% } %>\n\n    // Initialize module\n    config.module = {\n        preLoaders: [],\n        loaders: [{\n            // JS LOADER\n            // Reference: https://github.com/babel/babel-loader\n            // Transpile .js files using babel-loader\n            // Compiles ES6 and ES7 into ES5 code\n            test: /\\.js$/,\n            loader: 'babel',\n            include: [\n                path.resolve(__dirname, 'client/'),\n                path.resolve(__dirname, 'node_modules/lodash-es/')\n            ]\n        }, {\n            // TS LOADER\n            // Reference: https://github.com/s-panferov/awesome-typescript-loader\n            // Transpile .ts files using awesome-typescript-loader\n            test: /\\.ts$/,\n            loader: 'awesome-typescript-loader',\n            query: {\n                tsconfig: path.resolve(__dirname, 'tsconfig.client.json')\n            },\n            include: [\n                path.resolve(__dirname, 'client/')\n            ]\n        }, {\n            // ASSET LOADER\n            // Reference: https://github.com/webpack/file-loader\n            // Copy png, jpg, jpeg, gif, svg, woff, woff2, ttf, eot files to output\n            // Rename the file using the asset hash\n            // Pass along the updated reference to your code\n            // You can add here any file extension you want to get copied to your output\n            test: /\\.(png|jpg|jpeg|gif|svg|woff|woff2|ttf|eot)([\\?]?.*)$/,\n            loader: 'file'\n        }, {\n            <%_ if(filters.pug) { _%>\n            // Pug HTML LOADER\n            // Reference: https://github.com/willyelm/pug-html-loader\n            // Allow loading Pug throw js\n            test: /\\.(jade|pug)$/,\n            loaders: ['raw-loader', 'pug-html']\n        }, {<% } %>\n            <%_ if(filters.html) { _%>\n            // HTML LOADER\n            // Reference: https://github.com/webpack/raw-loader\n            // Allow loading html through js\n            test: /\\.html$/,\n            loader: 'raw'\n        }, {<% } %>\n            // CSS LOADER\n            // Reference: https://github.com/webpack/css-loader\n            // Allow loading css through js\n            //\n            // Reference: https://github.com/postcss/postcss-loader\n            // Postprocess your css with PostCSS plugins\n            test: /\\.css$/,\n            loader: !TEST\n                // Reference: https://github.com/webpack/extract-text-webpack-plugin\n                // Extract css files in production builds\n                //\n                // Reference: https://github.com/webpack/style-loader\n                // Use style-loader in development for hot-loading\n                ? ExtractTextPlugin.extract('style', 'css!postcss')\n                // Reference: https://github.com/webpack/null-loader\n                // Skip loading css in test mode\n                : 'null'\n        }<% if(!filters.css) { %>, {\n            <%_ if(filters.sass) { _%>\n            // SASS LOADER\n            // Reference: https://github.com/jtangelder/sass-loader\n            test: /\\.(scss|sass)$/,\n            loaders: ['style', 'css', 'sass'],\n            include: [\n                path.resolve(__dirname, 'node_modules/bootstrap-sass/assets/stylesheets/*.scss'),\n                path.resolve(__dirname, 'client/app/app.scss')\n            ]<% } %>\n            <%_ if(filters.less) { _%>\n            // LESS LOADER\n            // Reference: https://github.com/\n            test: /\\.less$/,\n            loaders: ['style', 'css', 'less'],\n            include: [\n                path.resolve(__dirname, 'node_modules/bootstrap/less/*.less'),\n                path.resolve(__dirname, 'client/app/app.less')\n            ]<% } %>\n            <%_ if(filters.stylus) { _%>\n            // Stylus LOADER\n            // Reference: https://github.com/\n            test: /\\.styl$/,\n            loaders: ['style', 'css', 'stylus?paths=node_modules/bootstrap-styl'],\n            include: [\n                path.resolve(__dirname, 'node_modules/bootstrap-styl/bootstrap/*.styl'),\n                path.resolve(__dirname, 'client/app/app.styl')\n            ]<% } %>\n        }<% } %>]\n    };\n\n    config.module.postLoaders = [{\n        test: /\\.<%= scriptExt %>$/,\n        loader: 'ng-annotate?single_quotes'\n    }];\n\n    <%_ if(filters.babel) { _%>\n    // ISPARTA INSTRUMENTER LOADER\n    // Reference: https://github.com/ColCh/isparta-instrumenter-loader\n    // Instrument JS files with Isparta for subsequent code coverage reporting\n    // Skips node_modules and spec files\n    if(TEST) {\n        config.module.preLoaders.push({\n            //delays coverage til after tests are run, fixing transpiled source coverage error\n            test: /\\.js$/,\n            exclude: /(node_modules|spec\\.js|mock\\.js)/,\n            loader: 'isparta-instrumenter',\n            query: {\n                babel: {\n                    // optional: ['runtime', 'es7.classProperties', 'es7.decorators']\n                }\n            }\n        });\n    }<% } %>\n    <%_ if(filters.ts) { _%>\n    //TODO: TS Instrumenter<% } %>\n\n    /**\n     * PostCSS\n     * Reference: https://github.com/postcss/autoprefixer-core\n     * Add vendor prefixes to your css\n     */\n    config.postcss = [\n        autoprefixer({\n            browsers: ['last 2 version']\n        })\n    ];\n\n    /**\n     * Plugins\n     * Reference: http://webpack.github.io/docs/configuration.html#plugins\n     * List: http://webpack.github.io/docs/list-of-plugins.html\n     */\n    config.plugins = [\n        /*\n         * Plugin: ForkCheckerPlugin\n         * Description: Do type checking in a separate process, so webpack don't need to wait.\n         *\n         * See: https://github.com/s-panferov/awesome-typescript-loader#forkchecker-boolean-defaultfalse\n         */\n        new ForkCheckerPlugin(),\n\n        // Reference: https://github.com/webpack/extract-text-webpack-plugin\n        // Extract css files\n        // Disabled when in test mode or not in build mode\n        new ExtractTextPlugin('[name].[hash].css', {\n            disable: !BUILD || TEST\n        })\n    ];\n\n    if(!TEST) {\n        config.plugins.push(new CommonsChunkPlugin({\n            name: 'vendor',\n\n            // filename: \"vendor.js\"\n            // (Give the chunk a different name)\n\n            minChunks: Infinity\n            // (with more entries, this ensures that no other module\n            //  goes into the vendor chunk)\n        }));\n    }\n\n    // Skip rendering index.html in test mode\n    // Reference: https://github.com/ampedandwired/html-webpack-plugin\n    // Render index.html\n    if(!TEST) {\n        let htmlConfig = {\n            template: 'client/_index.html',\n            filename: '../client/index.html',\n            alwaysWriteToDisk: true\n        }\n        config.plugins.push(\n          new HtmlWebpackPlugin(htmlConfig),\n          new HtmlWebpackHarddiskPlugin()\n        );\n    }\n\n    // Add build specific plugins\n    if(BUILD) {\n        config.plugins.push(\n            // Reference: http://webpack.github.io/docs/list-of-plugins.html#noerrorsplugin\n            // Only emit files when there are no errors\n            new webpack.NoErrorsPlugin(),\n\n            // Reference: http://webpack.github.io/docs/list-of-plugins.html#dedupeplugin\n            // Dedupe modules in the output\n            new webpack.optimize.DedupePlugin(),\n\n            // Reference: http://webpack.github.io/docs/list-of-plugins.html#uglifyjsplugin\n            // Minify all javascript, switch loaders to minimizing mode\n            new webpack.optimize.UglifyJsPlugin({\n                mangle: false,\n                output: {\n                    comments: false\n                },\n                compress: {\n                    warnings: false\n                }\n            }),\n\n            // Reference: https://webpack.github.io/docs/list-of-plugins.html#defineplugin\n            // Define free global variables\n            new webpack.DefinePlugin({\n                'process.env': {\n                    NODE_ENV: '\"production\"'\n                }\n            })\n        );\n    }\n\n    if(DEV) {\n        config.plugins.push(\n            // Reference: https://webpack.github.io/docs/list-of-plugins.html#defineplugin\n            // Define free global variables\n            new webpack.DefinePlugin({\n                'process.env': {\n                    NODE_ENV: '\"development\"'\n                }\n            })\n        );\n    }\n\n    config.cache = DEV;\n\n    if(TEST) {\n        config.stats = {\n            colors: true,\n            reasons: true\n        };\n        config.debug = false;\n    }\n\n    /**\n     * Dev server configuration\n     * Reference: http://webpack.github.io/docs/configuration.html#devserver\n     * Reference: http://webpack.github.io/docs/webpack-dev-server.html\n     */\n    config.devServer = {\n        contentBase: './client/',\n        stats: {\n            modules: false,\n            cached: false,\n            colors: true,\n            chunk: false\n        }\n    };\n\n    config.node = {\n        global: 'window',\n        process: true,\n        crypto: 'empty',\n        clearImmediate: false,\n        setImmediate: false\n    };\n\n    return config;\n};\n","/home/travis/build/npmtest/node-npmtest-generator-angular-fullstack/node_modules/generator-angular-fullstack/templates/endpoint/basename.controller.js":"/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     <%= route %>              ->  index<% if(filters.models) { %>\n * POST    <%= route %>              ->  create\n * GET     <%= route %>/:id          ->  show\n * PUT     <%= route %>/:id          ->  upsert\n * PATCH   <%= route %>/:id          ->  patch\n * DELETE  <%= route %>/:id          ->  destroy<% } %>\n */\n\n'use strict';<% if(filters.models) { %>\n\nimport jsonpatch from 'fast-json-patch';<% if(filters.mongooseModels) { %>\nimport <%= classedName %> from './<%= basename %>.model';<% } if(filters.sequelizeModels) { %>\nimport {<%= classedName %>} from '<%= relativeRequire(config.get('registerModelsFile')) %>';<% } %>\n\nfunction respondWithResult(res, statusCode) {\n  statusCode = statusCode || 200;\n  return function(entity) {\n    if(entity) {\n      return res.status(statusCode).json(entity);\n    }\n    return null;\n  };\n}\n\nfunction patchUpdates(patches) {\n  return function(entity) {\n    try {\n      // eslint-disable-next-line prefer-reflect\n      jsonpatch.apply(entity, patches, /*validate*/ true);\n    } catch(err) {\n      return Promise.reject(err);\n    }\n\n    return entity.save();\n  };\n}\n\nfunction removeEntity(res) {\n  return function(entity) {\n    if(entity) {\n      <% if(filters.mongooseModels) { %>return entity.remove()<% }\n         if(filters.sequelizeModels) { %>return entity.destroy()<% } %>\n        .then(() => {\n          res.status(204).end();\n        });\n    }\n  };\n}\n\nfunction handleEntityNotFound(res) {\n  return function(entity) {\n    if(!entity) {\n      res.status(404).end();\n      return null;\n    }\n    return entity;\n  };\n}\n\nfunction handleError(res, statusCode) {\n  statusCode = statusCode || 500;\n  return function(err) {\n    res.status(statusCode).send(err);\n  };\n}<% } %>\n\n// Gets a list of <%= classedName %>s\nexport function index(req, res) {<% if(!filters.models) { %>\n  res.json([]);<% } else { %>\n  <% if(filters.mongooseModels) { %>return <%= classedName %>.find().exec()<% }\n     if(filters.sequelizeModels) { %>return <%= classedName %>.findAll()<% } %>\n    .then(respondWithResult(res))\n    .catch(handleError(res));<% } %>\n}<% if(filters.models) { %>\n\n// Gets a single <%= classedName %> from the DB\nexport function show(req, res) {\n  <% if(filters.mongooseModels) { %>return <%= classedName %>.findById(req.params.id).exec()<% }\n     if(filters.sequelizeModels) { %>return <%= classedName %>.find({\n    where: {\n      _id: req.params.id\n    }\n  })<% } %>\n    .then(handleEntityNotFound(res))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Creates a new <%= classedName %> in the DB\nexport function create(req, res) {\n  <% if(filters.mongooseModels) { %>return <%= classedName %>.create(req.body)<% }\n     if(filters.sequelizeModels) { %>return <%= classedName %>.create(req.body)<% } %>\n    .then(respondWithResult(res, 201))\n    .catch(handleError(res));\n}\n\n// Upserts the given <%= classedName %> in the DB at the specified ID\nexport function upsert(req, res) {\n  if(req.body._id) {\n    Reflect.deleteProperty(req.body, '_id');\n  }\n  <%_ if(filters.mongooseModels) { -%>\n  return <%= classedName %>.findOneAndUpdate({_id: req.params.id}, req.body, {new: true, upsert: true, setDefaultsOnInsert: true, runValidators: true}).exec()<% } %>\n  <%_ if(filters.sequelizeModels) { -%>\n  return <%= classedName %>.upsert(req.body, {\n    where: {\n      _id: req.params.id\n    }\n  })<% } %>\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Updates an existing <%= classedName %> in the DB\nexport function patch(req, res) {\n  if(req.body._id) {\n    Reflect.deleteProperty(req.body, '_id');\n  }\n  <% if(filters.mongooseModels) { %>return <%= classedName %>.findById(req.params.id).exec()<% }\n     if(filters.sequelizeModels) { %>return <%= classedName %>.find({\n    where: {\n      _id: req.params.id\n    }\n  })<% } %>\n    .then(handleEntityNotFound(res))\n    .then(patchUpdates(req.body))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Deletes a <%= classedName %> from the DB\nexport function destroy(req, res) {\n  <% if(filters.mongooseModels) { %>return <%= classedName %>.findById(req.params.id).exec()<% }\n     if(filters.sequelizeModels) { %>return <%= classedName %>.find({\n    where: {\n      _id: req.params.id\n    }\n  })<% } %>\n    .then(handleEntityNotFound(res))\n    .then(removeEntity(res))\n    .catch(handleError(res));\n}<% } %>\n","/home/travis/build/npmtest/node-npmtest-generator-angular-fullstack/node_modules/generator-angular-fullstack/templates/endpoint/basename.events(models).js":"/**\n * <%= classedName %> model events\n */\n\n'use strict';\n\nimport {EventEmitter} from 'events';<% if(filters.sequelizeModels) { %>\nvar <%= classedName %> = require('<%= relativeRequire(config.get('registerModelsFile')) %>').<%= classedName %>;<% } %>\nvar <%= classedName %>Events = new EventEmitter();\n\n// Set max event listeners (0 == unlimited)\n<%= classedName %>Events.setMaxListeners(0);\n\n// Model events\n<%_ if(filters.mongooseModels) { -%>\nvar events = {\n  save: 'save',\n  remove: 'remove'\n};\n<%_ } if(filters.sequelizeModels) { -%>\nvar events = {\n  afterCreate: 'save',\n  afterUpdate: 'save',\n  afterDestroy: 'remove'\n};\n<%_ } -%>\n\n// Register the event emitter to the model events\nfunction registerEvents(<%= classedName %>) {\n  for(var e in events) {\n    let event = events[e];<% if(filters.mongooseModels) { %>\n    <%= classedName %>.post(e, emitEvent(event));<% } if(filters.sequelizeModels) { %>\n    <%= classedName %>.hook(e, emitEvent(event));<% } %>\n  }\n}\n\nfunction emitEvent(event) {\n  return function(doc<% if(filters.sequelizeModels) { %>, options, done<% } %>) {\n    <%= classedName %>Events.emit(event + ':' + doc._id, doc);\n    <%= classedName %>Events.emit(event, doc);<% if(filters.sequelizeModels) { %>\n    done(null);<% } %>\n  };\n}\n<% if (filters.sequelizeModels) { %>\nregisterEvents(<%= classedName %>);<% } if (filters.mongooseModels) { %>\nexport {registerEvents};<% } %>\nexport default <%= classedName %>Events;\n","/home/travis/build/npmtest/node-npmtest-generator-angular-fullstack/node_modules/generator-angular-fullstack/templates/endpoint/basename.integration.js":"'use strict';\n\n/* globals describe, expect, it, beforeEach, afterEach */\n\nvar app = require('<%= relativeRequire('server') %>');\nimport request from 'supertest';<% if(filters.models) { %>\n\nvar new<%= classedName %>;<% } %>\n\ndescribe('<%= classedName %> API:', function() {\n  describe('GET <%= route %>', function() {\n    var <%= cameledName %>s;\n\n    beforeEach(function(done) {\n      request(app)\n        .get('<%= route %>')\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if(err) {\n            return done(err);\n          }\n          <%= cameledName %>s = res.body;\n          done();\n        });\n    });\n\n    it('should respond with JSON array', function() {\n      <%= expect() %><%= cameledName %>s<%= to() %>.be.instanceOf(Array);\n    });\n  });<% if(filters.models) { %>\n\n  describe('POST <%= route %>', function() {\n    beforeEach(function(done) {\n      request(app)\n        .post('<%= route %>')\n        .send({\n          name: 'New <%= classedName %>',\n          info: 'This is the brand new <%= cameledName %>!!!'\n        })\n        .expect(201)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if(err) {\n            return done(err);\n          }\n          new<%= classedName %> = res.body;\n          done();\n        });\n    });\n\n    it('should respond with the newly created <%= cameledName %>', function() {\n      <%= expect() %>new<%= classedName %>.name<%= to() %>.equal('New <%= classedName %>');\n      <%= expect() %>new<%= classedName %>.info<%= to() %>.equal('This is the brand new <%= cameledName %>!!!');\n    });\n  });\n\n  describe('GET <%= route %>/:id', function() {\n    var <%= cameledName %>;\n\n    beforeEach(function(done) {\n      request(app)\n        .get(`<%= route %>/${new<%= classedName %>._id}`)\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if(err) {\n            return done(err);\n          }\n          <%= cameledName %> = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      <%= cameledName %> = {};\n    });\n\n    it('should respond with the requested <%= cameledName %>', function() {\n      <%= expect() %><%= cameledName %>.name<%= to() %>.equal('New <%= classedName %>');\n      <%= expect() %><%= cameledName %>.info<%= to() %>.equal('This is the brand new <%= cameledName %>!!!');\n    });\n  });\n\n  describe('PUT <%= route %>/:id', function() {\n    var updated<%= classedName %>;\n\n    beforeEach(function(done) {\n      request(app)\n        .put(`<%= route %>/${new<%= classedName %>._id}`)\n        .send({\n          name: 'Updated <%= classedName %>',\n          info: 'This is the updated <%= cameledName %>!!!'\n        })\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end(function(err, res) {\n          if(err) {\n            return done(err);\n          }\n          updated<%= classedName %> = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      updated<%= classedName %> = {};\n    });\n\n    it('should respond with the updated <%= cameledName %>', function() {\n      <%= expect() %>updated<%= classedName %>.name<%= to() %>.equal('Updated <%= classedName %>');\n      <%= expect() %>updated<%= classedName %>.info<%= to() %>.equal('This is the updated <%= cameledName %>!!!');\n    });\n\n    it('should respond with the updated <%= cameledName %> on a subsequent GET', function(done) {\n      request(app)\n        .get(`<%= route %>/${new<%= classedName %>._id}`)\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end((err, res) => {\n          if(err) {\n            return done(err);\n          }\n          let <%= cameledName %> = res.body;\n\n          <%= expect() %><%= cameledName %>.name<%= to() %>.equal('Updated <%= classedName %>');\n          <%= expect() %><%= cameledName %>.info<%= to() %>.equal('This is the updated <%= cameledName %>!!!');\n\n          done();\n        });\n    });\n  });\n\n  describe('PATCH <%= route %>/:id', function() {\n    var patched<%= classedName %>;\n\n    beforeEach(function(done) {\n      request(app)\n        .patch(`<%= route %>/${new<%= classedName %>._id}`)\n        .send([\n          { op: 'replace', path: '/name', value: 'Patched <%= classedName %>' },\n          { op: 'replace', path: '/info', value: 'This is the patched <%= cameledName %>!!!' }\n        ])\n        .expect(200)\n        .expect('Content-Type', /json/)\n        .end(function(err, res) {\n          if(err) {\n            return done(err);\n          }\n          patched<%= classedName %> = res.body;\n          done();\n        });\n    });\n\n    afterEach(function() {\n      patched<%= classedName %> = {};\n    });\n\n    it('should respond with the patched <%= cameledName %>', function() {\n      <%= expect() %>patched<%= classedName %>.name<%= to() %>.equal('Patched <%= classedName %>');\n      <%= expect() %>patched<%= classedName %>.info<%= to() %>.equal('This is the patched <%= cameledName %>!!!');\n    });\n  });\n\n  describe('DELETE <%= route %>/:id', function() {\n    it('should respond with 204 on successful removal', function(done) {\n      request(app)\n        .delete(`<%= route %>/${new<%= classedName %>._id}`)\n        .expect(204)\n        .end(err => {\n          if(err) {\n            return done(err);\n          }\n          done();\n        });\n    });\n\n    it('should respond with 404 when <%= cameledName %> does not exist', function(done) {\n      request(app)\n        .delete(`<%= route %>/${new<%= classedName %>._id}`)\n        .expect(404)\n        .end(err => {\n          if(err) {\n            return done(err);\n          }\n          done();\n        });\n    });\n  });<% } %>\n});\n","/home/travis/build/npmtest/node-npmtest-generator-angular-fullstack/node_modules/generator-angular-fullstack/templates/endpoint/basename.model(mongooseModels).js":"'use strict';\n\nimport mongoose from 'mongoose';\nimport {registerEvents} from './<%= basename %>.events';\n\nvar <%= classedName %>Schema = new mongoose.Schema({\n  name: String,\n  info: String,\n  active: Boolean\n});\n\nregisterEvents(<%= classedName %>Schema);\nexport default mongoose.model('<%= classedName %>', <%= classedName %>Schema);\n","/home/travis/build/npmtest/node-npmtest-generator-angular-fullstack/node_modules/generator-angular-fullstack/templates/endpoint/basename.model(sequelizeModels).js":"'use strict';\n\nexport default function(sequelize, DataTypes) {\n  return sequelize.define('<%= classedName %>', {\n    _id: {\n      type: DataTypes.INTEGER,\n      allowNull: false,\n      primaryKey: true,\n      autoIncrement: true\n    },\n    name: DataTypes.STRING,\n    info: DataTypes.STRING,\n    active: DataTypes.BOOLEAN\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-generator-angular-fullstack/node_modules/generator-angular-fullstack/templates/endpoint/basename.socket(socketio).js":"/**\n * Broadcast updates to client when the model changes\n */\n\n'use strict';\n\nimport <%= classedName %>Events from './<%= basename %>.events';\n\n// Model events to emit\nvar events = ['save', 'remove'];\n\nexport function register(socket) {\n  // Bind model events to socket events\n  for(var i = 0, eventsLength = events.length; i < eventsLength; i++) {\n    var event = events[i];\n    var listener = createListener(`<%= cameledName %>:${event}`, socket);\n\n    <%= classedName %>Events.on(event, listener);\n    socket.on('disconnect', removeListener(event, listener));\n  }\n}\n\n\nfunction createListener(event, socket) {\n  return function(doc) {\n    socket.emit(event, doc);\n  };\n}\n\nfunction removeListener(event, listener) {\n  return function() {\n    <%= classedName %>Events.removeListener(event, listener);\n  };\n}\n"}